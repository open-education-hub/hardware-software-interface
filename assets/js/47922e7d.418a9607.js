"use strict";(self.webpackChunkhardware_software_interface=self.webpackChunkhardware_software_interface||[]).push([[375],{5680:(e,t,n)=>{n.d(t,{xA:()=>p,yg:()=>u});var a=n(6540);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),g=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=g(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},y=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=g(n),y=i,u=d["".concat(s,".").concat(y)]||d[y]||m[y]||r;return n?a.createElement(u,l(l({ref:t},p),{},{components:n})):a.createElement(u,l({ref:t},p))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=y;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[d]="string"==typeof e?e:i,l[1]=o;for(var g=2;g<r;g++)l[g]=n[g];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}y.displayName="MDXCreateElement"},4785:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>r,metadata:()=>o,toc:()=>g});var a=n(8168),i=(n(6540),n(5680));const r={},l="Lab 5 - Introduction to Assembly Language",o={unversionedId:"Labs/lab5",id:"Labs/lab5",title:"Lab 5 - Introduction to Assembly Language",description:"Task: Conditional jumps",source:"@site/docs/Labs/lab5.md",sourceDirName:"Labs",slug:"/Labs/lab5",permalink:"/hardware-software-interface/Labs/lab5",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Lab 4 - Toolchain. GOTO",permalink:"/hardware-software-interface/Labs/lab4"},next:{title:"Lab 6 - Registers and Memory Addressing",permalink:"/hardware-software-interface/Labs/lab6"}},s={},g=[{value:"Task: Conditional jumps",id:"task-conditional-jumps",level:2},{value:"Task: Grumpy Jumps",id:"task-grumpy-jumps",level:2},{value:"Task: Sets",id:"task-sets",level:2},{value:"Task: Min",id:"task-min",level:2},{value:"Task: Fibonacci",id:"task-fibonacci",level:2},{value:"Task: Carry Flag - Overflow Flag",id:"task-carry-flag---overflow-flag",level:2},{value:"Introduction",id:"introduction",level:2},{value:"What is the Assembly Language?",id:"what-is-the-assembly-language",level:3},{value:"Why Learn Assembly Language?",id:"why-learn-assembly-language",level:3},{value:"Debugging",id:"debugging",level:4},{value:"Code Optimization",id:"code-optimization",level:4},{value:"Reverse Engineering",id:"reverse-engineering",level:4},{value:"Embedded and Others",id:"embedded-and-others",level:4},{value:"Fun",id:"fun",level:4},{value:"x86 Family",id:"x86-family",level:2},{value:"Registers",id:"registers",level:3},{value:"Instruction Classes",id:"instruction-classes",level:3},{value:"Data Movement Instructions",id:"data-movement-instructions",level:4},{value:"Arithmetic and Logic Instructions",id:"arithmetic-and-logic-instructions",level:4},{value:"Program Control Instructions",id:"program-control-instructions",level:4},{value:"Guide: First look at Assembly instructions",id:"guide-first-look-at-assembly-instructions",level:2},{value:"Guide: Discovering Assembly",id:"guide-discovering-assembly",level:2}],p={toc:g},d="wrapper";function m(e){let{components:t,...r}=e;return(0,i.yg)(d,(0,a.A)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"lab-5---introduction-to-assembly-language"},"Lab 5 - Introduction to Assembly Language"),(0,i.yg)("h2",{id:"task-conditional-jumps"},"Task: Conditional jumps"),(0,i.yg)("p",null,"You will solve the exercises starting from the ",(0,i.yg)("inlineCode",{parentName:"p"},"hello_world.asm")," file located in the ",(0,i.yg)("inlineCode",{parentName:"p"},"drills/tasks/conditional-jumps")," directory."),(0,i.yg)("ol",null,(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("p",{parentName:"li"},"Modify the program so that the message is displayed only if the content of the ",(0,i.yg)("inlineCode",{parentName:"p"},"eax")," register is greater than that of ",(0,i.yg)("inlineCode",{parentName:"p"},"ebx"),".\nAlso, modify the values of the registers to continue displaying the message ",(0,i.yg)("inlineCode",{parentName:"p"},'"Hello, World!"'),".")),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("p",{parentName:"li"},"Modify the program to also display ",(0,i.yg)("inlineCode",{parentName:"p"},'"Goodbye, World!"')," at the end.")),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("p",{parentName:"li"},"Using jump instructions, modify the program to display ",(0,i.yg)("inlineCode",{parentName:"p"},'"Hello, World!"')," N times, where N is given through the ",(0,i.yg)("inlineCode",{parentName:"p"},"ecx")," register.\nAvoid infinite looping."))),(0,i.yg)("blockquote",null,(0,i.yg)("p",{parentName:"blockquote"},(0,i.yg)("strong",{parentName:"p"},"TIP"),": After successful completion, the program should display:"),(0,i.yg)("pre",{parentName:"blockquote"},(0,i.yg)("code",{parentName:"pre",className:"language-c"},"Hello, World!\nHello, World!\nHello, World!\nHello, World!\nHello, World!\nHello, World!\nGoodbye, World!\n"))),(0,i.yg)("p",null,"If you're having difficulties solving this exercise, go through ",(0,i.yg)("a",{parentName:"p",href:"/hardware-software-interface/Labs/lab5#x86-family"},"this")," reading material."),(0,i.yg)("h2",{id:"task-grumpy-jumps"},"Task: Grumpy Jumps"),(0,i.yg)("p",null,"You will solve the exercises starting from the ",(0,i.yg)("inlineCode",{parentName:"p"},"grumpy_jumps.asm")," file located in the ",(0,i.yg)("inlineCode",{parentName:"p"},"drills/tasks/grumpy-jumps")," directory."),(0,i.yg)("ol",null,(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("p",{parentName:"li"},"Modify the values of the ",(0,i.yg)("inlineCode",{parentName:"p"},"eax")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"ebx")," registers so that when the program is run, the message ",(0,i.yg)("inlineCode",{parentName:"p"},"Well done!")," is displayed.\nFollow the ",(0,i.yg)("inlineCode",{parentName:"p"},"TODO")," comments.")),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("p",{parentName:"li"},"Why does the wrong message still appear?\nModify the source so that the wrong message is not displayed anymore."))),(0,i.yg)("blockquote",null,(0,i.yg)("p",{parentName:"blockquote"},(0,i.yg)("strong",{parentName:"p"},"TIP"),": To determine the necessary values for the ",(0,i.yg)("inlineCode",{parentName:"p"},"eax")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"ebx")," registers, we recommend using GDB.")),(0,i.yg)("p",null,"If you're having difficulties solving this exercise, go through ",(0,i.yg)("a",{parentName:"p",href:"/hardware-software-interface/Labs/lab5#x86-family"},"this")," reading material."),(0,i.yg)("h2",{id:"task-sets"},"Task: Sets"),(0,i.yg)("p",null,"You will solve the exercises starting from the ",(0,i.yg)("inlineCode",{parentName:"p"},"sets.asm")," file located in the ",(0,i.yg)("inlineCode",{parentName:"p"},"drills/tasks/sets")," directory."),(0,i.yg)("p",null,"You need to implement operations on sets that can contain elements between 0 and 31.\nAn efficient way to do this (both in terms of space and speed) would be to represent sets so that a register represents a set.\nEach bit in the register represents an element in the set (if bit i is set, then the set contains element i)."),(0,i.yg)("blockquote",null,(0,i.yg)("p",{parentName:"blockquote"},(0,i.yg)("strong",{parentName:"p"},"TIP"),": For example: if ",(0,i.yg)("inlineCode",{parentName:"p"},"eax")," contains the representation of the set ",(0,i.yg)("inlineCode",{parentName:"p"},"{0,2,4}"),", the register value would be ",(0,i.yg)("inlineCode",{parentName:"p"},"2^0 + 2^2 + 2^4 = 1 + 4 + 16 = 21"),".\nEducate yourself about the available instructions on the ",(0,i.yg)("a",{parentName:"p",href:"guides/x86.html"},"x86 architecture"),".")),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"You have two defined sets.\nWhat values do they contain?\nPerform the union of the two sets.")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"Use the ",(0,i.yg)("inlineCode",{parentName:"p"},"or")," instruction to add two new elements to the set."))),(0,i.yg)("blockquote",null,(0,i.yg)("p",{parentName:"blockquote"},(0,i.yg)("strong",{parentName:"p"},"TIP"),': Take advantage of the fact that the current sets, although they have "space" for 32 bits, only use 8 bits.\nIf you ',(0,i.yg)("inlineCode",{parentName:"p"},"or")," with a number greater than 255 (",(0,i.yg)("inlineCode",{parentName:"p"},"0xff"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"2^8-1"),") which has two active bits, you will effectively add two new elements to the set.")),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"Perform the intersection of the two sets.")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"Determine the elements missing from the ",(0,i.yg)("inlineCode",{parentName:"p"},"eax")," set for it to be complete."))),(0,i.yg)("blockquote",null,(0,i.yg)("p",{parentName:"blockquote"},(0,i.yg)("strong",{parentName:"p"},"TIP"),": You need to take the complement of the number using the ",(0,i.yg)("inlineCode",{parentName:"p"},"not")," instruction.")),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"Remove an element from the first set.")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"Find the difference between the sets."))),(0,i.yg)("blockquote",null,(0,i.yg)("p",{parentName:"blockquote"},(0,i.yg)("strong",{parentName:"p"},"NOTE"),": In order to display the answer, you can use the ",(0,i.yg)("inlineCode",{parentName:"p"},"PRINTF32")," macro.\nFor example:"),(0,i.yg)("pre",{parentName:"blockquote"},(0,i.yg)("code",{parentName:"pre",className:"language-assembly"},"PRINTF32 `The union is: \\x0`\nPRINTF32 `%u\\n\\x0`, `EAX`\n"))),(0,i.yg)("p",null,"If you're having difficulties solving this exercise, go through ",(0,i.yg)("a",{parentName:"p",href:"/hardware-software-interface/Labs/lab5#x86-family"},"this")," reading material."),(0,i.yg)("h2",{id:"task-min"},"Task: Min"),(0,i.yg)("p",null,"You will solve this exercise starting from the ",(0,i.yg)("inlineCode",{parentName:"p"},"min.asm")," file located in the ",(0,i.yg)("inlineCode",{parentName:"p"},"drills/tasks/min")," directory."),(0,i.yg)("p",null,"Calculate the minimum of the numbers in 2 registers (",(0,i.yg)("inlineCode",{parentName:"p"},"eax")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"ebx"),") using a comparison instruction, a jump instruction, and the ",(0,i.yg)("inlineCode",{parentName:"p"},"xchg")," instruction."),(0,i.yg)("p",null,"If you're having difficulties solving this exercise, go through ",(0,i.yg)("a",{parentName:"p",href:"/hardware-software-interface/Labs/lab5#x86-family"},"this")," reading material."),(0,i.yg)("h2",{id:"task-fibonacci"},"Task: Fibonacci"),(0,i.yg)("p",null,"You will solve this exercise starting from the ",(0,i.yg)("inlineCode",{parentName:"p"},"fibonacci.asm")," file located in the ",(0,i.yg)("inlineCode",{parentName:"p"},"drills/tasks/fibonacci")," directory."),(0,i.yg)("p",null,"Calculate the Nth Fibonacci number, where N is given through the ",(0,i.yg)("inlineCode",{parentName:"p"},"eax")," register."),(0,i.yg)("blockquote",null,(0,i.yg)("p",{parentName:"blockquote"},(0,i.yg)("strong",{parentName:"p"},"NOTE"),": The fibonacci series goes as follows : ",(0,i.yg)("inlineCode",{parentName:"p"},"0, 1, 1, 2, 3, ...")," where each element ",(0,i.yg)("inlineCode",{parentName:"p"},"f[i] = f[i-2] + f[i-1]"),", except for the first two elements."),(0,i.yg)("p",{parentName:"blockquote"},(0,i.yg)("strong",{parentName:"p"},"TIP"),": For example, if the value stored in ",(0,i.yg)("inlineCode",{parentName:"p"},"eax")," is equal to ",(0,i.yg)("inlineCode",{parentName:"p"},"5"),", a correct solution will display ",(0,i.yg)("inlineCode",{parentName:"p"},"3")," and for ",(0,i.yg)("inlineCode",{parentName:"p"},"7"),", it will display ",(0,i.yg)("inlineCode",{parentName:"p"},"8"),".")),(0,i.yg)("p",null,"If you're having difficulties solving this exercise, go through ",(0,i.yg)("a",{parentName:"p",href:"/hardware-software-interface/Labs/lab5#x86-family"},"this")," reading material."),(0,i.yg)("h2",{id:"task-carry-flag---overflow-flag"},"Task: Carry Flag - Overflow Flag"),(0,i.yg)("p",null,"You will solve this exercises starting from the ",(0,i.yg)("inlineCode",{parentName:"p"},"of.asm"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"cf.asm")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"cf_of.asm")," files located in the ",(0,i.yg)("inlineCode",{parentName:"p"},"drills/tasks/cf-of")," directory."),(0,i.yg)("p",null,"Using the ",(0,i.yg)("inlineCode",{parentName:"p"},"add")," instruction on the ",(0,i.yg)("inlineCode",{parentName:"p"},"al")," register:"),(0,i.yg)("ol",null,(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("p",{parentName:"li"},"Set the ",(0,i.yg)("inlineCode",{parentName:"p"},"OF")," flag")),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("p",{parentName:"li"},"Set the ",(0,i.yg)("inlineCode",{parentName:"p"},"CF")," flag")),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("p",{parentName:"li"},"Set both flags simultaneously."))),(0,i.yg)("p",null,"If you're having difficulties solving this exercise, go through ",(0,i.yg)("a",{parentName:"p",href:"/hardware-software-interface/Labs/lab5#x86-family"},"this")," reading material."),(0,i.yg)("h2",{id:"introduction"},"Introduction"),(0,i.yg)("p",null,"Before we actually start learning to read code written in assembly language, and then write our first programs, we need to answer a few questions."),(0,i.yg)("h3",{id:"what-is-the-assembly-language"},"What is the Assembly Language?"),(0,i.yg)("p",null,"As you probably know, the basic role of a computer - specifically, of the processor - is to read, interpret, and execute instructions.\nThese instructions are encoded in machine code."),(0,i.yg)("p",null,"An example would be:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-text"},"1011000000001100011001100011000111011111111111100100\n")),(0,i.yg)("p",null,"This sequence of bits doesn't tell us much in particular.\nWe can convert it to hexadecimal to compress it and group it better."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-text"},"\\xB0\\x0C\\x66\\x31\\xD2\\xFF\\xE4\n")),(0,i.yg)("p",null,"Furthermore, for many of us, this sequence still doesn't mean anything.\nHence the need for a more understandable and usable language."),(0,i.yg)("p",null,"Assembly language allows us to write text programs which will then be translated, through an utility called an ",(0,i.yg)("strong",{parentName:"p"},"assembler"),", specific to each architecture, into machine code.\nMost assembly languages provide a direct correspondence between instructions. For example:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-assembly"},"mov al, 12 <-> '\\xB0\\x0C'\nxor dx, dx <-> '\\x67\\x31\\xD2'\njmp esp    <-> '\\xFF\\xE4'\n")),(0,i.yg)("blockquote",null,(0,i.yg)("p",{parentName:"blockquote"},(0,i.yg)("strong",{parentName:"p"},"NOTE"),": Because assembly language depends on architecture, it is generally not portable.\nTherefore, processor manufacturers have tried to keep the instructions unchanged from one generation to another, so that even when adding new processors to the line-up, they would maintain compatibility within the same processor family (for example, Intel processors 80286, 80386, 80486 etc. are all part of the generic Intel x86).")),(0,i.yg)("h3",{id:"why-learn-assembly-language"},"Why Learn Assembly Language?"),(0,i.yg)("p",null,'Besides the very high didactic value, in which you understand what "stack overflow" consists of, data representation, and what is specific to the processor you are working with, there are a few applications where knowledge of assembly language and, implicitly, architecture are necessary or even critical.'),(0,i.yg)("h4",{id:"debugging"},"Debugging"),(0,i.yg)("p",null,"It's quite likely that at least one of the programs you've written in the past generated the following result:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-text"},"Segmentation fault\n")),(0,i.yg)("p",null,"Sometimes, you will encounter a series of data similar to the following:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-text"},"Page Fault cr2=10000000 at eip e75; flags=6\neax=00000030 ebx=00000000 ecx=0000000c edx=00000000\nesi=0001a44a edi=00000000 ebp=00000000 esp=00002672\ncs=18 ds=38 es=af fs=0 gs=0 ss=20 error=0002\n")),(0,i.yg)("p",null,"For someone who knows assembly language, it's relatively easy to begin troubleshooting using a debugger like ",(0,i.yg)("a",{parentName:"p",href:"http://www.gnu.org/software/gdb/"},"GDB")," or ",(0,i.yg)("a",{parentName:"p",href:"http://www.ollydbg.de/"},"OllyDbg"),", because the message provides almost all the information they need."),(0,i.yg)("h4",{id:"code-optimization"},"Code Optimization"),(0,i.yg)("p",null,'Think about how you would write a C program to perform AES encryption and decryption.\nThen, inform the compiler that you want to optimize your code.\nEvaluate the performance of that code (size, execution time, number of jump instructions, etc.).\nAlthough compilers are often labeled as "black magic", there are situations where you simply know ',(0,i.yg)("a",{parentName:"p",href:"https://www.intel.com/content/dam/doc/white-paper/advanced-encryption-standard-new-instructions-set-paper.pdf"},"something")," about the processor you're working with better than they do."),(0,i.yg)("p",null,"Furthermore, just understanding assembly code is enough to evaluate a code and optimize its critical sections.\nEven if you don't write code in assembly language, you'll be aware of the code generated from the C instructions you use."),(0,i.yg)("h4",{id:"reverse-engineering"},"Reverse Engineering"),(0,i.yg)("p",null,"A large portion of common applications are closed-source.\nAll you have when it comes to these applications is a pre-compiled binary file.\nSome of these may contain malicious code, in which case they need to be analyzed in a controlled environment (malware analysis/research)."),(0,i.yg)("h4",{id:"embedded-and-others"},"Embedded and Others"),(0,i.yg)("p",null,"There are cases where constraints on code and/or data size are imposed, such as specialized devices for a single task, with little memory.\nThis category includes drivers for devices."),(0,i.yg)("h4",{id:"fun"},"Fun"),(0,i.yg)("p",null,"For more details, discuss with your laboratory assistant to share his personal experience with assembly language and practical use cases."),(0,i.yg)("h2",{id:"x86-family"},"x86 Family"),(0,i.yg)("p",null,"Almost all major processors from Intel share a common ISA (Instruction Set Architecture).\nThese processors are highly backward compatible, with most instructions unchanged over generations, but only added or extended."),(0,i.yg)("blockquote",null,(0,i.yg)("p",{parentName:"blockquote"},(0,i.yg)("strong",{parentName:"p"},"NOTE"),": An ISA defines the instructions supported by a processor, register size, addressing modes, data types, instruction format, interrupts, and memory organization.\nProcessors in this family fall into the broad category of CISC (Complex Instruction Set Computers).\nThe philosophy behind them is to have a large number of instructions, with variable length, capable of performing complex operations, over multiple clock cycles.")),(0,i.yg)("h3",{id:"registers"},"Registers"),(0,i.yg)("p",null,"The basic working units for x86 processors are registers.\nThese are a suite of locations within the processor through which it interacts with memory, I/O, etc."),(0,i.yg)("p",null,"x86 processors have 8 such 32-bit registers.\nAlthough any of these can be used in operations, for historical reasons, each register has a specific role."),(0,i.yg)("table",null,(0,i.yg)("thead",{parentName:"table"},(0,i.yg)("tr",{parentName:"thead"},(0,i.yg)("th",{parentName:"tr",align:null},"Name"),(0,i.yg)("th",{parentName:"tr",align:null},"Role"))),(0,i.yg)("tbody",{parentName:"table"},(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},"eax")),(0,i.yg)("td",{parentName:"tr",align:null},"accumulator; system calls, I/O, arithmetic")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},"ebx")),(0,i.yg)("td",{parentName:"tr",align:null},"base register; used for memory-based addressing")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},"ecx")),(0,i.yg)("td",{parentName:"tr",align:null},"counter in loop instructions")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},"edx")),(0,i.yg)("td",{parentName:"tr",align:null},"data register, used for I/O, arithmetic, interrupt values; can extend eax to 64 bits")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},"esi")),(0,i.yg)("td",{parentName:"tr",align:null},"source in string operations")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},"edi")),(0,i.yg)("td",{parentName:"tr",align:null},"destination in string operations")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},"ebp")),(0,i.yg)("td",{parentName:"tr",align:null},"base or frame pointer; points to the current stack frame")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},"esp")),(0,i.yg)("td",{parentName:"tr",align:null},"stack pointer; points to the top of the stack")))),(0,i.yg)("p",null,"In addition to these, there are some special registers that cannot be directly accessed by the programmer, such as ",(0,i.yg)("inlineCode",{parentName:"p"},"eflags")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"eip")," (Instruction Pointer)."),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"eip")," is a register that holds the address of the current instruction to be executed.\nIt cannot be directly modified, programmatically, but indirectly through jump, call, and ret instructions."),(0,i.yg)("p",null,"The ",(0,i.yg)("inlineCode",{parentName:"p"},"eflags")," register contains ",(0,i.yg)("inlineCode",{parentName:"p"},"32")," bits used as status indicators or condition variables.\nWe say that a flag is set if its value is ",(0,i.yg)("inlineCode",{parentName:"p"},"1"),". The ones commonly used by programmers are:"),(0,i.yg)("table",null,(0,i.yg)("thead",{parentName:"table"},(0,i.yg)("tr",{parentName:"thead"},(0,i.yg)("th",{parentName:"tr",align:null},"Name"),(0,i.yg)("th",{parentName:"tr",align:null},"Expanded Name"),(0,i.yg)("th",{parentName:"tr",align:null},"Description"))),(0,i.yg)("tbody",{parentName:"table"},(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},"CF")),(0,i.yg)("td",{parentName:"tr",align:null},"Carry Flag"),(0,i.yg)("td",{parentName:"tr",align:null},"Set if the result exceeds the maximum (or minimum) unsigned integer value")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},"PF")),(0,i.yg)("td",{parentName:"tr",align:null},"Parity Flag"),(0,i.yg)("td",{parentName:"tr",align:null},"Set if the low byte of the result contains an even number of 1 bits")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},"AF")),(0,i.yg)("td",{parentName:"tr",align:null},"Auxiliary Carry Flag"),(0,i.yg)("td",{parentName:"tr",align:null},"Used in BCD arithmetic; set if bit 3 generates a carry or borrow")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},"ZF")),(0,i.yg)("td",{parentName:"tr",align:null},"Zero Flag"),(0,i.yg)("td",{parentName:"tr",align:null},"Set if the result of the previous instruction is 0")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},"SF")),(0,i.yg)("td",{parentName:"tr",align:null},"Sign Flag"),(0,i.yg)("td",{parentName:"tr",align:null},"Has the same value as the sign bit of the result (1 negative, 0 positive)")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},"OF")),(0,i.yg)("td",{parentName:"tr",align:null},"Overflow Flag"),(0,i.yg)("td",{parentName:"tr",align:null},"Set if the result exceeds the maximum (or minimum) signed integer value")))),(0,i.yg)("blockquote",null,(0,i.yg)("p",{parentName:"blockquote"},(0,i.yg)("strong",{parentName:"p"},"NOTE"),": If you follow the evolution of registers from 8086, you'll see that initially they were named ",(0,i.yg)("inlineCode",{parentName:"p"},"ax"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"bx"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"cx"),' etc., and were 16 bits in size.\nFrom 80386, Intel extended these registers to 32 bits (i.e., "extended" ',(0,i.yg)("inlineCode",{parentName:"p"},"ax")," \u2192 ",(0,i.yg)("inlineCode",{parentName:"p"},"eax"),").")),(0,i.yg)("h3",{id:"instruction-classes"},"Instruction Classes"),(0,i.yg)("p",null,"Although the current set of instructions for Intel processors has ",(0,i.yg)("a",{parentName:"p",href:"https://www.intel.com/content/dam/www/public/us/en/documents/manuals/64-ia-32-architectures-software-developer-instruction-set-reference-manual-325383.pdf"},"hundreds of instructions"),", we will only look at a ",(0,i.yg)("a",{parentName:"p",href:"http://css.csail.mit.edu/6.858/2015/readings/i386.pdf"},"small portion of them"),".\nMore precisely, some of the 80386 instructions."),(0,i.yg)("p",null,"All x86 processors instructions can fit into 3 categories :"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"data movement instructions"),(0,i.yg)("li",{parentName:"ul"},"arithmetical/logical instructions"),(0,i.yg)("li",{parentName:"ul"},"program control instructions")),(0,i.yg)("p",null,"We will only display some of the more important instructions of each category since many of them are alike."),(0,i.yg)("h4",{id:"data-movement-instructions"},"Data Movement Instructions"),(0,i.yg)("p",null,"These instructions are used to transfer data between registers, between memory and registers, and to initialize data:"),(0,i.yg)("table",null,(0,i.yg)("thead",{parentName:"table"},(0,i.yg)("tr",{parentName:"thead"},(0,i.yg)("th",{parentName:"tr",align:null},"Name"),(0,i.yg)("th",{parentName:"tr",align:null},"Operands"),(0,i.yg)("th",{parentName:"tr",align:null},"Description"))),(0,i.yg)("tbody",{parentName:"table"},(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},"mov")),(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},"dst, src")),(0,i.yg)("td",{parentName:"tr",align:null},"Moves the value from source to the destination(erasing what was in the destination before)")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},"push")),(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},"src")),(0,i.yg)("td",{parentName:"tr",align:null},'Moves the value from the source onto the "top" of the stack')),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},"pop")),(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},"dst")),(0,i.yg)("td",{parentName:"tr",align:null},'Moves the value from the "top" of the stack into the destination')),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},"lea")),(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},"dst, src")),(0,i.yg)("td",{parentName:"tr",align:null},"Loads the effective address of the source to the destination")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},"xchg")),(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},"dst, src")),(0,i.yg)("td",{parentName:"tr",align:null},"Swaps (Exchanges) the values between the source and the destination")))),(0,i.yg)("h4",{id:"arithmetic-and-logic-instructions"},"Arithmetic and Logic Instructions"),(0,i.yg)("p",null,"These instructions perform arithmetic and logic operations:"),(0,i.yg)("table",null,(0,i.yg)("thead",{parentName:"table"},(0,i.yg)("tr",{parentName:"thead"},(0,i.yg)("th",{parentName:"tr",align:null},"Name"),(0,i.yg)("th",{parentName:"tr",align:null},"Operands"),(0,i.yg)("th",{parentName:"tr",align:null},"Description"))),(0,i.yg)("tbody",{parentName:"table"},(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},"add")),(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},"dst, src")),(0,i.yg)("td",{parentName:"tr",align:null},"Adds the source and the destination, storing the result in the destination")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},"sub")),(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},"dst, src")),(0,i.yg)("td",{parentName:"tr",align:null},"Subtracts the source from the destination, storing the result in the destination")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},"and")),(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},"dst, src")),(0,i.yg)("td",{parentName:"tr",align:null},"Calculates logical AND between the source and the destination, storing the result in the destination")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},"or")),(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},"dst, src")),(0,i.yg)("td",{parentName:"tr",align:null},"Calculates logical OR between the source and the destination, storing the result in the destination")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},"xor")),(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},"dst, src")),(0,i.yg)("td",{parentName:"tr",align:null},"Calculates logical XOR between the source and the destination, storing the result in the destination")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},"test")),(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},"dst, src")),(0,i.yg)("td",{parentName:"tr",align:null},"Calculates logical AND between the source and the destination without storing the result")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},"shl")),(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},"dst, <const>")),(0,i.yg)("td",{parentName:"tr",align:null},"Calculates the logical shifted value from the destination with a constant number of positions, storing the result in the destination")))),(0,i.yg)("h4",{id:"program-control-instructions"},"Program Control Instructions"),(0,i.yg)("p",null,"These instructions are used to control the flow of programs:"),(0,i.yg)("table",null,(0,i.yg)("thead",{parentName:"table"},(0,i.yg)("tr",{parentName:"thead"},(0,i.yg)("th",{parentName:"tr",align:null},"Name"),(0,i.yg)("th",{parentName:"tr",align:null},"Operands"),(0,i.yg)("th",{parentName:"tr",align:null},"Description"))),(0,i.yg)("tbody",{parentName:"table"},(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},"jmp")),(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},"<address>")),(0,i.yg)("td",{parentName:"tr",align:null},"Jumps unconditionally to the specified address(directly, by register, by labels)")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},"cmp")),(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},"dst, src")),(0,i.yg)("td",{parentName:"tr",align:null},"Compares the source with the destination(more details below)")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"j",(0,i.yg)("inlineCode",{parentName:"td"},"cond")),(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},"<address>")),(0,i.yg)("td",{parentName:"tr",align:null},"Jumps conditionally to the specified address depending on the state of the flag(set/not set)/condition variable")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"call"),(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},"<address>")),(0,i.yg)("td",{parentName:"tr",align:null},"Calls the subroutine located at the specified address")))),(0,i.yg)("blockquote",null,(0,i.yg)("p",{parentName:"blockquote"},(0,i.yg)("strong",{parentName:"p"},"NOTE"),": ",(0,i.yg)("a",{parentName:"p",href:"https://www.felixcloutier.com/x86/cmp"},"The 'cmp dest, src' instruction")," effectively calculates ",(0,i.yg)("inlineCode",{parentName:"p"},"dest - src")," behind the scenes(as in subtracting the source from the destination).\nWe are talking about an unsigned subtraction, without storing the result.")),(0,i.yg)("p",null,"Therefore, when talking about the code:"),(0,i.yg)("blockquote",null,(0,i.yg)("pre",{parentName:"blockquote"},(0,i.yg)("code",{parentName:"pre",className:"language-assembly"},"  cmp eax, 0\n  jl negative\n"))),(0,i.yg)("p",null,"The jump to the ",(0,i.yg)("inlineCode",{parentName:"p"},"negative")," label will be made only if the value in eax is less than ",(0,i.yg)("inlineCode",{parentName:"p"},"0"),".\nThe ",(0,i.yg)("inlineCode",{parentName:"p"},"eax - 0")," subtraction is evaluated and if the result is negative(and so, eax is negative), the jump will be made.\\\nWhen have comparisons with ",(0,i.yg)("inlineCode",{parentName:"p"},"0"),", the same thing can be done more efficiently using the ",(0,i.yg)("inlineCode",{parentName:"p"},"test")," instruction:"),(0,i.yg)("blockquote",null,(0,i.yg)("pre",{parentName:"blockquote"},(0,i.yg)("code",{parentName:"pre",className:"language-assembly"},"  test eax, eax\n  jl negative\n"))),(0,i.yg)("p",null,"More on this ",(0,i.yg)("a",{parentName:"p",href:"https://en.wikibooks.org/wiki/X86_Assembly/Control_Flow#Comparison_Instructions"},"here"),"."),(0,i.yg)("h2",{id:"guide-first-look-at-assembly-instructions"},"Guide: First look at Assembly instructions"),(0,i.yg)("p",null,"To follow this guide, you will need to use the ",(0,i.yg)("inlineCode",{parentName:"p"},"instructions.asm")," file located in the ",(0,i.yg)("inlineCode",{parentName:"p"},"guides/instructions/support")," directory."),(0,i.yg)("p",null,"Diving right into the demo, we can see one of the most important instructions that helps us, programmers, work with the stack and that is ",(0,i.yg)("inlineCode",{parentName:"p"},"push"),".\nWe discussed what the ",(0,i.yg)("inlineCode",{parentName:"p"},"push")," instruction does in the ",(0,i.yg)("a",{parentName:"p",href:"/hardware-software-interface/Labs/lab5#x86-family"},"reading section"),".\nConsidering its call, we can understand that it takes the ",(0,i.yg)("inlineCode",{parentName:"p"},"0")," value(as a ",(0,i.yg)("inlineCode",{parentName:"p"},"DWORD"),", a number stored on ",(0,i.yg)("inlineCode",{parentName:"p"},"4"),' bytes) and moves it onto the "top" of the stack.'),(0,i.yg)("p",null,"That ",(0,i.yg)("inlineCode",{parentName:"p"},"push")," is followed by a new instruction:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-assembly"},"popf\n")),(0,i.yg)("blockquote",null,(0,i.yg)("p",{parentName:"blockquote"},(0,i.yg)("strong",{parentName:"p"},"IMPORTANT"),": The ",(0,i.yg)("inlineCode",{parentName:"p"},"popf")," instruction is used for setting, depending on how many bytes we pop from the stack(in our case, 4 bytes), the ",(0,i.yg)("inlineCode",{parentName:"p"},"EFLAGS")," register(setting the entire register when popping 4 bytes and only the 2 lower bytes of the register when popping 2 bytes).\nYou can read more about the ",(0,i.yg)("inlineCode",{parentName:"p"},"popf")," instruction ",(0,i.yg)("a",{parentName:"p",href:"https://www.felixcloutier.com/x86/popf:popfd:popfq"},"here")," and ",(0,i.yg)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/FLAGS_register"},"here"),".")),(0,i.yg)("p",null,(0,i.yg)("img",{alt:"EFLAGS Representation",src:n(7323).A})),(0,i.yg)("p",null,"Having in mind what the ",(0,i.yg)("inlineCode",{parentName:"p"},"popf")," instruction does, try to guess what would adding the following line of code at line 15 and the ",(0,i.yg)("inlineCode",{parentName:"p"},"mystery_label")," label at the line(of the current file, before adding the instruction) 53 would make the program do."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-assembly"},"jnc mystery_label\n")),(0,i.yg)("p",null,"Moving on, we can see that the ",(0,i.yg)("inlineCode",{parentName:"p"},"0")," value is set to the ",(0,i.yg)("inlineCode",{parentName:"p"},"eax")," register using the ",(0,i.yg)("inlineCode",{parentName:"p"},"mov")," instruction.\nCan you give example of another two ways of setting the value in ",(0,i.yg)("inlineCode",{parentName:"p"},"eax")," to ",(0,i.yg)("inlineCode",{parentName:"p"},"0")," without using ",(0,i.yg)("inlineCode",{parentName:"p"},"mov")," ?"),(0,i.yg)("blockquote",null,(0,i.yg)("p",{parentName:"blockquote"},(0,i.yg)("strong",{parentName:"p"},"HINT"),": Think about the ",(0,i.yg)("a",{parentName:"p",href:"/hardware-software-interface/Labs/lab5#x86-family"},"logical operators"),".")),(0,i.yg)("p",null,"Next, by using the ",(0,i.yg)("inlineCode",{parentName:"p"},"test")," instruction we can set the ",(0,i.yg)("inlineCode",{parentName:"p"},"flags")," based on the output of the ",(0,i.yg)("inlineCode",{parentName:"p"},"logical and")," between ",(0,i.yg)("inlineCode",{parentName:"p"},"eax")," and itself."),(0,i.yg)("p",null,"After resetting the flags, we store ",(0,i.yg)("inlineCode",{parentName:"p"},"0xffffffff")," in the ",(0,i.yg)("inlineCode",{parentName:"p"},"ebx")," register(which is actually the largest number it can store before setting the carry flag) and then use the ",(0,i.yg)("inlineCode",{parentName:"p"},"test")," instruction yet again.\nSimilarly, what do you think adding the following line of code after the ",(0,i.yg)("inlineCode",{parentName:"p"},"test")," instruction would produce ?"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-assembly"},"jnz mystery_label\n")),(0,i.yg)("p",null,"We reset the flags once again and now we take a look at working with the smaller portions of the ",(0,i.yg)("inlineCode",{parentName:"p"},"eax")," register.\nCan you guess the output of the following command, put right under the ",(0,i.yg)("inlineCode",{parentName:"p"},"add al, bl")," instruction ?\nWhat about the flags ?\nWhich flag has been set ?"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-assembly"},"PRINTF32 `%d\\n\\x0`, eax\n")),(0,i.yg)("p",null,"Similarly, try to answer the same questions from above, but considering the next portions of the code."),(0,i.yg)("p",null,"After thoroughly inspecting this example, you should have a vague idea about how setting the flags works."),(0,i.yg)("h2",{id:"guide-discovering-assembly"},"Guide: Discovering Assembly"),(0,i.yg)("p",null,"To follow this guide, you will need to navigate to the ",(0,i.yg)("inlineCode",{parentName:"p"},"guides/discovering-assembly/support")," directory."),(0,i.yg)("ol",null,(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("p",{parentName:"li"},"Open the ",(0,i.yg)("inlineCode",{parentName:"p"},"ex1.asm")," file and read the comments.\nAssemble it by using the ",(0,i.yg)("inlineCode",{parentName:"p"},"make")," utility and run it.\nUsing gdb, go through the program line by line (the ",(0,i.yg)("inlineCode",{parentName:"p"},"start")," command followed by ",(0,i.yg)("inlineCode",{parentName:"p"},"next"),") and observe the changes in register values after executing the ",(0,i.yg)("inlineCode",{parentName:"p"},"mov")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"add")," instructions.\nIgnore the sequence of ",(0,i.yg)("inlineCode",{parentName:"p"},"PRINTF32")," instructions.")),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("p",{parentName:"li"},"Open the ",(0,i.yg)("inlineCode",{parentName:"p"},"ex2.asm")," file and read the comments.\nAssemble it by using the ",(0,i.yg)("inlineCode",{parentName:"p"},"make")," utility and run it.\nUsing gdb, observe the change in the ",(0,i.yg)("inlineCode",{parentName:"p"},"eip")," register when executing the ",(0,i.yg)("inlineCode",{parentName:"p"},"jmp")," instruction.\nTo skip the ",(0,i.yg)("inlineCode",{parentName:"p"},"PRINTF32")," instructions, add a breakpoint at the ",(0,i.yg)("inlineCode",{parentName:"p"},"jump_incoming")," label (the ",(0,i.yg)("inlineCode",{parentName:"p"},"break")," command followed by ",(0,i.yg)("inlineCode",{parentName:"p"},"run"),").")),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("p",{parentName:"li"},"Open the ",(0,i.yg)("inlineCode",{parentName:"p"},"ex3.asm")," file and read the comments.\nAssemble it by using the ",(0,i.yg)("inlineCode",{parentName:"p"},"make")," utility and run it.\nUsing gdb, navigate through the program using breakpoints.\nFollow the program flow.\nWhy is ",(0,i.yg)("inlineCode",{parentName:"p"},"15")," displayed first and then ",(0,i.yg)("inlineCode",{parentName:"p"},"3"),"?\nBecause of the jump at line 9.\nWhere does the jump at line 25 point to?\nTo the ",(0,i.yg)("inlineCode",{parentName:"p"},"zone1")," label.")),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("p",{parentName:"li"},"Open the ",(0,i.yg)("inlineCode",{parentName:"p"},"ex4.asm")," file and read the comments.\nAssemble it by using the ",(0,i.yg)("inlineCode",{parentName:"p"},"make")," utility and run it.\nUsing gdb, go through the program.\nWhy isn't the jump at line 12 taken?\nBecause the ",(0,i.yg)("inlineCode",{parentName:"p"},"je")," instruction jumps if the ",(0,i.yg)("inlineCode",{parentName:"p"},"ZF")," bit in the ",(0,i.yg)("inlineCode",{parentName:"p"},"FLAGS")," register is set.\nThis bit is set by the ",(0,i.yg)("inlineCode",{parentName:"p"},"cmp")," instruction, which calculates the difference between the values of the ",(0,i.yg)("inlineCode",{parentName:"p"},"eax")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"ebx")," registers without storing the result.\nHowever, the ",(0,i.yg)("inlineCode",{parentName:"p"},"add")," instruction at line 11 clears this flag because the result of the operation is different from 0."))))}m.isMDXComponent=!0},7323:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/eflags-representation-2092cff4e0c5323ca3736ef4a4ab22b4.svg"}}]);