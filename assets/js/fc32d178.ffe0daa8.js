"use strict";(self.webpackChunkhardware_software_interface=self.webpackChunkhardware_software_interface||[]).push([[442],{5680:(e,n,t)=>{t.d(n,{xA:()=>d,yg:()=>h});var a=t(6540);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},d=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},g="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),g=p(t),m=o,h=g["".concat(s,".").concat(m)]||g[m]||c[m]||i;return t?a.createElement(h,r(r({ref:n},d),{},{components:t})):a.createElement(h,r({ref:n},d))}));function h(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,r=new Array(i);r[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[g]="string"==typeof e?e:o,r[1]=l;for(var p=2;p<i;p++)r[p]=t[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},2546:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var a=t(8168),o=(t(6540),t(5680));const i={},r="Lab 4 - Toolchain. GOTO",l={unversionedId:"Labs/lab4",id:"Labs/lab4",title:"Lab 4 - Toolchain. GOTO",description:"Task GOTOs",source:"@site/docs/Labs/lab4.md",sourceDirName:"Labs",slug:"/Labs/lab4",permalink:"/hardware-software-interface/Labs/lab4",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Lab 2 - Memory Operations. Introduction to GDB",permalink:"/hardware-software-interface/Labs/lab2"},next:{title:"Lab 5 - Introduction to Assembly Language",permalink:"/hardware-software-interface/Labs/lab5"}},s={},p=[{value:"Task: C: GOTOs",id:"task-c-gotos",level:2},{value:"Task: Reverse: Old hits",id:"task-reverse-old-hits",level:2},{value:"C basics: GOTOs",id:"c-basics-gotos",level:2},{value:"Syntax",id:"syntax",level:3},{value:"The &quot;WHYs&quot; of <code>goto</code>",id:"the-whys-of-goto",level:3},{value:"Guide: C: Warm-up GOTOs",id:"guide-c-warm-up-gotos",level:2},{value:"Reverse engineering",id:"reverse-engineering",level:2},{value:"Disassembly",id:"disassembly",level:3},{value:"Decompiling",id:"decompiling",level:3},{value:"Guide: Online C Compiling",id:"guide-online-c-compiling",level:2},{value:"Guide: Ghidra Tutorial: Decompiling",id:"guide-ghidra-tutorial-decompiling",level:2}],d={toc:p},g="wrapper";function c(e){let{components:n,...i}=e;return(0,o.yg)(g,(0,a.A)({},d,i,{components:n,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"lab-4---toolchain-goto"},"Lab 4 - Toolchain. GOTO"),(0,o.yg)("h2",{id:"task-c-gotos"},"Task: C: GOTOs"),(0,o.yg)("p",null,"For the algorithms below, write C code without using:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"function definitions/calls (except for ",(0,o.yg)("inlineCode",{parentName:"li"},"scanf()")," and ",(0,o.yg)("inlineCode",{parentName:"li"},"printf()"),")"),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"else")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"for")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"while")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"do {} while")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"if")," constructs containing return"),(0,o.yg)("li",{parentName:"ul"},"nested ",(0,o.yg)("inlineCode",{parentName:"li"},"if")," statements")),(0,o.yg)("p",null,"The only permitted statement within an ",(0,o.yg)("inlineCode",{parentName:"p"},"if")," construct is ",(0,o.yg)("inlineCode",{parentName:"p"},"goto"),"."),(0,o.yg)("p",null,"In other words, all the code must be written inside the ",(0,o.yg)("inlineCode",{parentName:"p"},"main")," function, and the control flow modification (jumping to another code area) is done only through sequences like ",(0,o.yg)("inlineCode",{parentName:"p"},"if (condition) goto label;")," or ",(0,o.yg)("inlineCode",{parentName:"p"},"goto label;"),"."),(0,o.yg)("ol",null,(0,o.yg)("li",{parentName:"ol"},"Implement an algorithm for finding the largest element of an array using C code and the above constraints.\nThe skeleton for the code is in ",(0,o.yg)("inlineCode",{parentName:"li"},"support/vector_max/vector_max.c"),"."),(0,o.yg)("li",{parentName:"ol"},"Implement binary search using C code and the above constraints.\nThe skeleton for the code is in ",(0,o.yg)("inlineCode",{parentName:"li"},"support/binary_search/binary_search.c"),".")),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},(0,o.yg)("strong",{parentName:"p"},"WARNING"),": We reiterate that the use cases of the goto statement are limited.\nThese exercises have educational value to get you accustomed to jump instructions that we will use in assembly language development.")),(0,o.yg)("p",null,"If you're having difficulties solving this exercise, go through ",(0,o.yg)("a",{parentName:"p",href:"/hardware-software-interface/Labs/lab4#c-basics-gotos"},"this")," reading material."),(0,o.yg)("h2",{id:"task-reverse-old-hits"},"Task: Reverse: Old hits"),(0,o.yg)("p",null,"Using ",(0,o.yg)("inlineCode",{parentName:"p"},"Ghidra"),", as well as ",(0,o.yg)("inlineCode",{parentName:"p"},"gdb"),", analyze the ",(0,o.yg)("inlineCode",{parentName:"p"},"old-hits/support/old-hits")," binary and obtain the secret information.\nThe program generates a random value and asks you to guess another value calculated based on the aforementioned one."),(0,o.yg)("p",null,"If you're having difficulties solving this exercise, go through ",(0,o.yg)("a",{parentName:"p",href:"/hardware-software-interface/Labs/lab4#guide-ghidra-tutorial-decompiling"},"this")," reading material."),(0,o.yg)("p",null,"Note: The following error can occur when running the executable if you don't have ",(0,o.yg)("inlineCode",{parentName:"p"},"libcrypto.so.1.1")," installed on your system:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"./old-hits: error while loading shared libraries: libcrypto.so.1.1: cannot open shared object file: No such file or directory\n")),(0,o.yg)("p",null,"To install ",(0,o.yg)("inlineCode",{parentName:"p"},"libcrypto.so.1.1")," run the following commands:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"wget http://nz2.archive.ubuntu.com/ubuntu/pool/main/o/openssl/libssl1.1_1.1.1f-1ubuntu2_amd64.deb\nsudo dpkg -i libssl1.1_1.1.1f-1ubuntu2_amd64.deb\nrm libssl1.1_1.1.1f-1ubuntu2_amd64.deb\n")),(0,o.yg)("h2",{id:"c-basics-gotos"},"C basics: GOTOs"),(0,o.yg)("p",null,"A less addressed concept in C tutorials is the goto statement.\nUsing the goto statement, a program can jump to intermediate points within a function.\nThese intermediate points are called labels."),(0,o.yg)("h3",{id:"syntax"},"Syntax"),(0,o.yg)("p",null,"Syntax-wise, a label consists of a name followed by the character ",(0,o.yg)("inlineCode",{parentName:"p"},":"),"."),(0,o.yg)("p",null,"Code example:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-c"},"##include <stdio.h>\n\nint main()\n{\n   int i, j, k;\n   /* some code */\ndo_some_work:\n   /* some other code */\n   work();\n   if (any_work())\n       goto do_some_work;\n   /* some code */\n   return 0;\n}\n")),(0,o.yg)("p",null,"The program executes a job through the ",(0,o.yg)("inlineCode",{parentName:"p"},"work()")," function.\nIn case there are other unfinished jobs, the program execution jumps to the label ",(0,o.yg)("inlineCode",{parentName:"p"},"do_some_work"),".\n",(0,o.yg)("inlineCode",{parentName:"p"},"do_some_work")," marks the point in the program where the processing of a new job begins.\nTo jump to this point, the goto statement followed by the declared label name is used.\nThrough different combinations of ",(0,o.yg)("inlineCode",{parentName:"p"},"if")," statements and ",(0,o.yg)("inlineCode",{parentName:"p"},"goto")," statements, other C instructions such as ",(0,o.yg)("inlineCode",{parentName:"p"},"else"),", ",(0,o.yg)("inlineCode",{parentName:"p"},"for"),", and ",(0,o.yg)("inlineCode",{parentName:"p"},"while")," can be emulated."),(0,o.yg)("p",null,"The example code given above could be replaced with ",(0,o.yg)("inlineCode",{parentName:"p"},"do { \u2026 } while ();"),":"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-c"},"##include <stdio.h>\n\nint main()\n{\n    int i, j, k;\n    /* some code */\n    do {\n        /* some other code */\n        work();\n    } while (any_work());\n    /* some code */\n    return 0;\n}\n")),(0,o.yg)("h3",{id:"the-whys-of-goto"},'The "WHYs" of ',(0,o.yg)("inlineCode",{parentName:"h3"},"goto")),(0,o.yg)("p",null,"Not only is this instruction missing in many C tutorials, but recommendations are made against using it because it often leads to obfuscated code (difficult to understand, maintain, and debug).\nHowever, there are cases where it is used.\nIn the Linux kernel code, for example, ",(0,o.yg)("inlineCode",{parentName:"p"},"goto")," instructions are used as a form of try-catch from higher-level languages (such as C++, Java, C#, etc.).\nExample:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-c"},'int process_data_from_mouse_device(...)\n{\n    int err;\n    int x, y;\n\n    /* >>try<< instructions */\n    err = init_communication_with_mouse();\n    if (err)\n        goto error;\n\n    err = get_x_coord_from_mouse(&x);\n    if (err)\n        goto error;\n\n    err = get_y_coord_from_mouse(&y);\n    if (err)\n        goto error;\n\n    err = announce_upper_layers_of_mouse_movement(x, y);\n    if (err)\n        goto error;\n\n    err = close_communication_with_mouse();\n    if (err)\n        goto error;\n\n    return 0;\n\n    /* >>catch<< instructions\' exceptions */\nerror:\n    print_message("Failed to get data from mouse device. Error = %d", err);\n    return err;\n}\n')),(0,o.yg)("p",null,"This code attempts to process data coming from a mouse and pass it to other higher-level parts of the kernel that could use it.\nIn case an error occurs, an error message is displayed, and the data processing is terminated.\nThe code seems correct but is not complete.\nIt's incomplete because if an error occurs in the middle of the function, communication with the mouse is left open.\nAn improved version would be the following:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-c"},'int process_data_from_mouse_device(...)\n{\n    int err;\n    int x, y;\n\n    /* >>try<< instructions */\n    err = init_communication_with_mouse();\n    if (err)\n        goto error;\n\n    err = get_x_coord_from_mouse(&x);\n    if (err)\n        goto error_close_connection;\n\n    err = get_y_coord_from_mouse(&y);\n    if (err)\n        goto error_close_connection;\n\n    err = announce_upper_layers_of_mouse_movement(x, y);\n    if (err)\n        goto error_close_connection;\n\n    err = close_communication_with_mouse();\n    if (err)\n        goto error;\n\n    return 0;\n\n    /* >>catch<< instructions\' exceptions */\nerror_close_connection:\n    close_communication_with_mouse();\nerror:\n    print_message("Failed to get data from mouse device. Error = %d", err);\n    return err;\n}\n')),(0,o.yg)("p",null,"In the improved version, if an error occurs, a cleanup part is also performed: the connection with the mouse will be closed, and then the code will continue with the general error handling of any errors in the program (displaying an error message)."),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},(0,o.yg)("strong",{parentName:"p"},"NOTE"),": Why does this course/lab cover such a topic?"),(0,o.yg)("p",{parentName:"blockquote"},"When we study assembly language, we will notice that a large portion of the workflow resembles a program made up of goto statements, even though most instructions of a high-level language, such as C, are nonexistent.\nThinking in terms of goto statements and including them in our code prepares us for working in assembly language."),(0,o.yg)("p",{parentName:"blockquote"},(0,o.yg)("strong",{parentName:"p"},"WARNING"),": In any other situation, this form of programming should be avoided as much as possible.\n",(0,o.yg)("img",{parentName:"p",src:"https://imgs.xkcd.com/comics/goto.png",alt:"goto.png"}))),(0,o.yg)("h2",{id:"guide-c-warm-up-gotos"},"Guide: C: Warm-up GOTOs"),(0,o.yg)("ol",null,(0,o.yg)("li",{parentName:"ol"},"Modify the source code in the ",(0,o.yg)("inlineCode",{parentName:"li"},"support/bogosort/bogosort.c")," file, by replacing the ",(0,o.yg)("inlineCode",{parentName:"li"},"break")," instruction with a ",(0,o.yg)("inlineCode",{parentName:"li"},"goto")," instruction (",(0,o.yg)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Bogosort"},"Bogosort"),")."),(0,o.yg)("li",{parentName:"ol"},"Similarly, replace the ",(0,o.yg)("inlineCode",{parentName:"li"},"continue")," instruction in ",(0,o.yg)("inlineCode",{parentName:"li"},"support/ignore_the_comments/ignore_the_comments.c")," with a ",(0,o.yg)("inlineCode",{parentName:"li"},"goto")," instruction without changing the functionality of the code.")),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},(0,o.yg)("strong",{parentName:"p"},"WARNING"),": When writing code with labels, please adhere to the following indentation recommendations:")),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Do not indent labels.\nKeep them aligned with the left margin of the editing screen."),(0,o.yg)("li",{parentName:"ul"},"Each label should be on its own line.\nThere is no code on the same line as the label."),(0,o.yg)("li",{parentName:"ul"},"Do not take labels into consideration when indenting the code.\nThe code should be indented in the same way whether there are labels or not."),(0,o.yg)("li",{parentName:"ul"},"Leave a blank line before the line containing a label.")),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},(0,o.yg)("strong",{parentName:"p"},"NOTE"),": ",(0,o.yg)("a",{parentName:"p",href:"https://stackoverflow.com/questions/3517726/what-is-wrong-with-using-goto/3517765"},"Situation")," where ",(0,o.yg)("inlineCode",{parentName:"p"},"goto")," may be useful.")),(0,o.yg)("p",null,"If you're having difficulties solving this exercise, go through ",(0,o.yg)("a",{parentName:"p",href:"/hardware-software-interface/Labs/lab4#c-basics-gotos"},"this")," reading material."),(0,o.yg)("h2",{id:"reverse-engineering"},"Reverse engineering"),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"Ghidra")," is a useful tool for investigating binaries and ",(0,o.yg)("inlineCode",{parentName:"p"},"reverse engineering"),"."),(0,o.yg)("h3",{id:"disassembly"},"Disassembly"),(0,o.yg)("p",null,"The disassembly process is used to obtain a file containing assembly code from a binary file.\nThis process is always possible because the machine code specific to the processor has a direct correspondence with the assembly code.\nFor example, the operation ",(0,o.yg)("inlineCode",{parentName:"p"},"add eax, 0x14"),", which adds 20 to the value in the eax register, is always represented using the binary code ",(0,o.yg)("inlineCode",{parentName:"p"},"83 c0 14"),"."),(0,o.yg)("h3",{id:"decompiling"},"Decompiling"),(0,o.yg)("p",null,"The Ghidra program can be used even for decompiling code.\nA decompiler can be used to obtain the source code in a (relatively) high-level language, which when compiled will produce an executable whose behavior will be the same as the original executable.\nIn comparison, a disassembler performs an exact translation of an executable program into assembly language because there is a 1:1 relationship between machine code and assembly language."),(0,o.yg)("h2",{id:"guide-online-c-compiling"},"Guide: Online C Compiling"),(0,o.yg)("p",null,"An interesting tool to observe how C code translates into assembly language is Compiler Explorer."),(0,o.yg)("ol",null,(0,o.yg)("li",{parentName:"ol"},"Go to ",(0,o.yg)("a",{parentName:"li",href:"https://gcc.godbolt.org/"},"Compiler Explorer"),"."),(0,o.yg)("li",{parentName:"ol"},'Load the "sum over array" program from the examples (accessible using the load button, shaped like a floppy disk).'),(0,o.yg)("li",{parentName:"ol"},"Make sure ",(0,o.yg)("inlineCode",{parentName:"li"},"x86-64 gcc 4.8.2")," is selected under ",(0,o.yg)("inlineCode",{parentName:"li"},"Compiler:"),"."),(0,o.yg)("li",{parentName:"ol"},"Use the option ",(0,o.yg)("inlineCode",{parentName:"li"},"-m32")," (in ",(0,o.yg)("inlineCode",{parentName:"li"},"Compiler options"),") to display code in 32-bit assembly language (as opposed to 64-bit by default)."),(0,o.yg)("li",{parentName:"ol"},"If you see the message ",(0,o.yg)("inlineCode",{parentName:"li"},"<Compilation failed>"),", add the option ",(0,o.yg)("inlineCode",{parentName:"li"},"-std=c99"),"."),(0,o.yg)("li",{parentName:"ol"},"Initially, the code might be quite cumbersome.\nTo make it more human-readable, add the option ",(0,o.yg)("inlineCode",{parentName:"li"},"-O2")," to the compilation options (",(0,o.yg)("inlineCode",{parentName:"li"},"Compiler options"),")."),(0,o.yg)("li",{parentName:"ol"},"You may notice the presence of symbols like ",(0,o.yg)("inlineCode",{parentName:"li"},".L3:")," and ",(0,o.yg)("inlineCode",{parentName:"li"},".L4:"),".\nThese represent fixed points in the program, labels, quite similar to what is found in C."),(0,o.yg)("li",{parentName:"ol"},"Go through the compilers corresponding to the following architectures one by one: ARM, ARM64, AVR, PowerPC.\n",(0,o.yg)("inlineCode",{parentName:"li"},"Note"),": for ARM, ARM64, and AVR, you will need to remove the previously set -m32 flag.\nYou can observe how the generated code differs from one architecture to another."),(0,o.yg)("li",{parentName:"ol"},"Also, try the following compilers: ",(0,o.yg)("inlineCode",{parentName:"li"},"clang")," and ",(0,o.yg)("inlineCode",{parentName:"li"},"icc"),".\nAs you can see, even though it's the same C code and the same architecture, the generated code differs.\nThis happens because each compiler can have a different optimization and code generation strategy.")),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},(0,o.yg)("strong",{parentName:"p"},"NOTE"),":\n",(0,o.yg)("a",{parentName:"p",href:"https://clang.llvm.org/"},"clang")," is an open-source C/C++ compiler.\nIt is often used in IDEs due to its very suggestive compilation error messages."),(0,o.yg)("p",{parentName:"blockquote"},(0,o.yg)("strong",{parentName:"p"},"NOTE"),": ",(0,o.yg)("inlineCode",{parentName:"p"},"icc")," is the C/C++ compiler from Intel.")),(0,o.yg)("p",null,"Write the following code sequence in the Code editor area:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-C"},"int simple_fn(void)\n{\n    int a = 1;\n    a++;\n    return a;\n}\n")),(0,o.yg)("p",null,"Observe the assembly code when the compilation options (",(0,o.yg)("inlineCode",{parentName:"p"},"Compiler options"),") are ",(0,o.yg)("inlineCode",{parentName:"p"},"-m32"),", and when the compilation options are ",(0,o.yg)("inlineCode",{parentName:"p"},"-m32 -O2"),".\nNotice the effect of optimization options on the generated assembly code."),(0,o.yg)("h2",{id:"guide-ghidra-tutorial-decompiling"},"Guide: Ghidra Tutorial: Decompiling"),(0,o.yg)("p",null,"In this tutorial, we aim to show how to analyze the functionality of a simple binary that prompts for the input of a correct password to obtain a secret value."),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},(0,o.yg)("strong",{parentName:"p"},"WARNING"),": In order to run Ghidra, access a terminal window and use the ",(0,o.yg)("inlineCode",{parentName:"p"},"ghidra")," command.")),(0,o.yg)("p",null,"Initially, when we run Ghidra, a window will appear showing our current projects."),(0,o.yg)("p",null,(0,o.yg)("img",{alt:"ghidra-initial.png",src:t(420).A,width:"1920",height:"1080"})),(0,o.yg)("p",null,"We can create a new project and give it a suitable name.\nTo do this, we will use: ",(0,o.yg)("inlineCode",{parentName:"p"},"File \u2192 New Project")," (or using the keyboard shortcut CTRL + N)."),(0,o.yg)("p",null,(0,o.yg)("img",{alt:"ghidra-added-project.png",src:t(8618).A,width:"1920",height:"1080"})),(0,o.yg)("p",null,"After creating the project, to add the executable file, we can use ",(0,o.yg)("inlineCode",{parentName:"p"},"File \u2192 Import file"),", or drag the file into the directory we created.\nGhidra will suggest the detected format and the compiler used.\nIn more special cases, we may need to change these configurations, but for the purpose of this tutorial, Ghidra's suggestions are perfect."),(0,o.yg)("p",null,(0,o.yg)("img",{alt:"ghidra-added-file.png",src:t(6127).A,width:"1920",height:"1080"})),(0,o.yg)("p",null,"The next step is to analyze the imported binary.\nWe can double-click on it.\nGhidra will ask us if we want to analyze it.\nTo do this, we will click ",(0,o.yg)("inlineCode",{parentName:"p"},"Yes")," and then ",(0,o.yg)("inlineCode",{parentName:"p"},"Analyze"),"."),(0,o.yg)("p",null,(0,o.yg)("img",{alt:"ghidra-analyzed.png",src:t(4502).A,width:"1920",height:"1080"})),(0,o.yg)("p",null,"After the executable has been analyzed, Ghidra displays an interpretation of the binary information, which includes the disassembled code of the program.\nNext, for example, we can try to decompile a function.\nIn the left part of the window, we have the ",(0,o.yg)("inlineCode",{parentName:"p"},"Symbol Tree")," section;\nif we open ",(0,o.yg)("inlineCode",{parentName:"p"},"Functions"),", we can see that Ghidra has detected certain functions, including the ",(0,o.yg)("inlineCode",{parentName:"p"},"main")," function in the case of this binary.\nTherefore, if we double-click on ",(0,o.yg)("inlineCode",{parentName:"p"},"main"),", the decompiled ",(0,o.yg)("inlineCode",{parentName:"p"},"main")," function appears on the right, and in the central window, we see the corresponding assembly code."),(0,o.yg)("p",null,(0,o.yg)("img",{alt:"ghidra-main.png",src:t(3297).A,width:"1920",height:"1080"})),(0,o.yg)("p",null,"We will notice that the decompiled code is not an exact representation of the source code from the file ",(0,o.yg)("inlineCode",{parentName:"p"},"crackme.c"),", but it gives us a fairly good idea of how it works and looks.\nLooking at the decompiled code, we notice that the ",(0,o.yg)("inlineCode",{parentName:"p"},"main")," function has two long-type parameters named ",(0,o.yg)("inlineCode",{parentName:"p"},"param_1")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"param_2"),", instead of the normal prototype ",(0,o.yg)("inlineCode",{parentName:"p"},"main(int argc, char *argv[])"),".\nThe second parameter of ",(0,o.yg)("inlineCode",{parentName:"p"},"main"),' is of type "vector of pointers to character data" (which is generically interpreted as "array of strings").\nBelow is a generic perspective on how the vector is represented for a 64-bit system.\nIn the representation on the second line, ',(0,o.yg)("inlineCode",{parentName:"p"},"argp")," should be understood as ",(0,o.yg)("inlineCode",{parentName:"p"},"char *argp = (char *)argv")," in order for the calculation ",(0,o.yg)("inlineCode",{parentName:"p"},"argp + N")," to make sense."),(0,o.yg)("table",null,(0,o.yg)("thead",{parentName:"table"},(0,o.yg)("tr",{parentName:"thead"},(0,o.yg)("th",{parentName:"tr",align:null},"argv","[0]"),(0,o.yg)("th",{parentName:"tr",align:"center"},"argv","[1]"),(0,o.yg)("th",{parentName:"tr",align:"right"},"argv","[2]"))),(0,o.yg)("tbody",{parentName:"table"},(0,o.yg)("tr",{parentName:"tbody"},(0,o.yg)("td",{parentName:"tr",align:null},"argp"),(0,o.yg)("td",{parentName:"tr",align:"center"},"argp + 8"),(0,o.yg)("td",{parentName:"tr",align:"right"},"argp + 16")))),(0,o.yg)("p",null,"The difference in parameter types of the ",(0,o.yg)("inlineCode",{parentName:"p"},"main")," function is due to interpretation: the binary is compiled for the amd64 architecture (which is an extension of the x86 architecture for 64-bit systems), and the size of a\n",(0,o.yg)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Word_(computer_architecture)"},"processor word"),"\nis 8 bytes (or 64 bits).\nThe size of a processor word is reflected in the size of a pointer and also in the size of a single parameter (if the parameter is smaller than a word, it is automatically extended to the size of a word).\nAdditionally, by coincidence, the size of a variable of type ",(0,o.yg)("inlineCode",{parentName:"p"},"long")," is also 64 bits (the sizes of\n",(0,o.yg)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/C_data_types"},"data types"),"\nin C are not well-defined, only some lower limits for data types are defined).\nThis causes the interpretation of both parameters as ",(0,o.yg)("inlineCode",{parentName:"p"},"long"),", as all parameters, regardless of type (int or pointer), are manipulated identically.\nThe calculation ",(0,o.yg)("inlineCode",{parentName:"p"},"param_2 + 8")," is used to calculate the address of the second pointer in the ",(0,o.yg)("inlineCode",{parentName:"p"},"argv")," vector (that is, ",(0,o.yg)("inlineCode",{parentName:"p"},"argv[1]"),").\nFor a program compiled for the 32-bit x86 architecture, the address of ",(0,o.yg)("inlineCode",{parentName:"p"},"argv[1]")," would have been ",(0,o.yg)("inlineCode",{parentName:"p"},"param_2 + 4"),"."),(0,o.yg)("p",null,"Using the information from the decompiled code, we can infer that the program expects a password as an argument, and it must be 8 characters long, with the character at position 3 being 'E' (the first character is at position zero)."))}c.isMDXComponent=!0},6127:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/ghidra-added-file-49c585a78cb743dc19ba8ed52650ba6e.png"},8618:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/ghidra-added-project-28d84e0e8d6277e786c10d5dd42a3434.png"},4502:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/ghidra-analyzed-3e67161d6951f2d6150bfde13dcd7e9b.png"},420:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/ghidra-initial-aa83559f08ae3ed0108d66103daf16f7.png"},3297:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/ghidra-main-a7ef01832df96ad523a45514afd35cb6.png"}}]);