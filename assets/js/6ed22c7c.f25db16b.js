"use strict";(self.webpackChunkhardware_software_interface=self.webpackChunkhardware_software_interface||[]).push([[613],{5680:(e,t,n)=>{n.d(t,{xA:()=>u,yg:()=>h});var a=n(6540);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},d="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},y=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=p(n),y=i,h=d["".concat(l,".").concat(y)]||d[y]||g[y]||r;return n?a.createElement(h,o(o({ref:t},u),{},{components:n})):a.createElement(h,o({ref:t},u))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=y;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:i,o[1]=s;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}y.displayName="MDXCreateElement"},7056:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>g,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var a=n(8168),i=(n(6540),n(5680));const r={},o="Lab 13 - CTF",s={unversionedId:"Labs/lab13",id:"Labs/lab13",title:"Lab 13 - CTF",description:"Task: Hidden in Plain Sight",source:"@site/docs/Labs/lab13.md",sourceDirName:"Labs",slug:"/Labs/lab13",permalink:"/hardware-software-interface/Labs/lab13",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Lab 12 - Linking",permalink:"/hardware-software-interface/Labs/lab12"}},l={},p=[{value:"Task: Hidden in Plain Sight",id:"task-hidden-in-plain-sight",level:2},{value:"Task: Hidden in Plain Sight 2",id:"task-hidden-in-plain-sight-2",level:2},{value:"Task: Look at Him Go",id:"task-look-at-him-go",level:2},{value:"Task: Playing God",id:"task-playing-god",level:2},{value:"Task: Indirect Business",id:"task-indirect-business",level:2},{value:"Task: RIP My Buffers Off",id:"task-rip-my-buffers-off",level:2},{value:"Task: Feeling Chained",id:"task-feeling-chained",level:2},{value:"Task: ROP",id:"task-rop",level:2},{value:"CTF",id:"ctf",level:2},{value:"Return Oriented Programming",id:"return-oriented-programming",level:3}],u={toc:p},d="wrapper";function g(e){let{components:t,...r}=e;return(0,i.yg)(d,(0,a.A)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"lab-13---ctf"},"Lab 13 - CTF"),(0,i.yg)("h2",{id:"task-hidden-in-plain-sight"},"Task: Hidden in Plain Sight"),(0,i.yg)("p",null,"The ",(0,i.yg)("inlineCode",{parentName:"p"},"hidden-in-plain-sight-1/support/link")," binary provides everything you need.\nFind a way to use it."),(0,i.yg)("blockquote",null,(0,i.yg)("p",{parentName:"blockquote"},(0,i.yg)("strong",{parentName:"p"},"TIP:")," If you want a main function to be done right, you gotta do it yourself.")),(0,i.yg)("p",null,"If you are having trouble solving this exercise, check ",(0,i.yg)("a",{parentName:"p",href:"https://stackoverflow.com/questions/15441877/how-do-i-link-object-files-in-c-fails-with-undefined-symbols-for-architecture"},"this"),"."),(0,i.yg)("h2",{id:"task-hidden-in-plain-sight-2"},"Task: Hidden in Plain Sight 2"),(0,i.yg)("p",null,"Analyze the ",(0,i.yg)("inlineCode",{parentName:"p"},"hidden-in-plain-sight-2/support/link2")," binary.\nExecuting it is no longer a mystery, but it will be a bit more challenging to reach the flag."),(0,i.yg)("blockquote",null,(0,i.yg)("p",{parentName:"blockquote"},(0,i.yg)("strong",{parentName:"p"},"TIP:")," Not all functions are private.")),(0,i.yg)("p",null,"In case you get stuck, feel free to take a look at ",(0,i.yg)("a",{parentName:"p",href:"https://stackoverflow.com/questions/60261705/why-functions-locals-and-arguments-are-pushed-to-the-stack"},"this"),"!"),(0,i.yg)("h2",{id:"task-look-at-him-go"},"Task: Look at Him Go"),(0,i.yg)("p",null,"The ",(0,i.yg)("inlineCode",{parentName:"p"},"look-at-him-go/support/dynamic")," binary is executable this time and its sole purpose is to obtain the flag and place it somewhere in memory.\nNo tricks here."),(0,i.yg)("blockquote",null,(0,i.yg)("p",{parentName:"blockquote"},(0,i.yg)("strong",{parentName:"p"},"TIP:")," GDB is your friend.")),(0,i.yg)("p",null,"If you're unable to progress in this exercise, reference ",(0,i.yg)("a",{parentName:"p",href:"https://cs-pub-ro.github.io/hardware-software-interface/Lab%202%20-%20Memory%20Operations.%20Introduction%20to%20GDB/Introduction%20to%20GDB/Reading/"},"the GDB lab")," and ",(0,i.yg)("a",{parentName:"p",href:"https://stackoverflow.com/questions/5429137/how-to-print-register-values-in-gdb"},"this"),"."),(0,i.yg)("h2",{id:"task-playing-god"},"Task: Playing God"),(0,i.yg)("p",null,"The ",(0,i.yg)("inlineCode",{parentName:"p"},"playing-god/support/dynamic2")," binary asks you to guess a number between 1 and 100000.\nFind a better way to discover it."),(0,i.yg)("p",null,"To help you solve this exercise, like in the previous one, make sure to ",(0,i.yg)("a",{parentName:"p",href:"https://stackoverflow.com/questions/5429137/how-to-print-register-values-in-gdb"},"keep an eye on the registers"),"!"),(0,i.yg)("h2",{id:"task-indirect-business"},"Task: Indirect Business"),(0,i.yg)("p",null,"The ",(0,i.yg)("inlineCode",{parentName:"p"},"indirect-business/support/buff-ovf")," binary contains a classic vulnerability.\nUse the input to alter the data in your favor."),(0,i.yg)("p",null,"If you experience a neural buffer overflow, take a look at the ",(0,i.yg)("a",{parentName:"p",href:"https://cs-pub-ro.github.io/hardware-software-interface/Lab%2011%20-%20Buffer%20Management.%20Buffer%20Overflow/"},"relevant lab")," and at ",(0,i.yg)("a",{parentName:"p",href:"https://medium.com/@0x-Singularity/exploit-tutorial-understanding-buffer-overflows-d017108edc85"},"online examples"),"."),(0,i.yg)("p",null,"If that still doesn't work, keep in mind that the great cybersecurity expert named Sun Tzu was a big proponent of bruteforce attacks."),(0,i.yg)("h2",{id:"task-rip-my-buffers-off"},"Task: RIP My Buffers Off"),(0,i.yg)("p",null,"The ",(0,i.yg)("inlineCode",{parentName:"p"},"rip-my-buffers-off/support/buff-ovf2")," binary does not use the ",(0,i.yg)("inlineCode",{parentName:"p"},"get_flag()")," function, but it offers an opportunity to call it."),(0,i.yg)("blockquote",null,(0,i.yg)("p",{parentName:"blockquote"},(0,i.yg)("strong",{parentName:"p"},"TIP:")," Where can a function address be overwritten?")),(0,i.yg)("p",null,(0,i.yg)("a",{parentName:"p",href:"https://medium.com/@0x-Singularity/exploit-tutorial-understanding-buffer-overflows-d017108edc85"},"This example"),", albeit also linked in the previous exercise, is still a great resource to help you solve this exercise."),(0,i.yg)("h2",{id:"task-feeling-chained"},"Task: Feeling Chained"),(0,i.yg)("p",null,"Follow the sequence of operations in the functions of the binary at ",(0,i.yg)("inlineCode",{parentName:"p"},"feeling-chained/support/buff-ovf3"),".\nIdentify the necessary ones and... you already know how to call them."),(0,i.yg)("p",null,"If you cannot find your way through this exercise, look for variables that you need to overwrite with specific values in order to finish the exploit, and think of their positioning on the stack.\nThe previously mentioned ",(0,i.yg)("a",{parentName:"p",href:"https://medium.com/@0x-Singularity/exploit-tutorial-understanding-buffer-overflows-d017108edc85"},"online example")," is still highly relevant."),(0,i.yg)("h2",{id:"task-rop"},"Task: ROP"),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"rop/support/rop")," is a 64-bit binary with a simple buffer overflow.\nHowever, it has NX enabled, so normal shellcode will not work.\nFind a way to create a working exploit."),(0,i.yg)("blockquote",null,(0,i.yg)("p",{parentName:"blockquote"},(0,i.yg)("strong",{parentName:"p"},"TIP:")," On x86_64, function arguments are no longer found on the stack but in registers.")),(0,i.yg)("p",null,"If you're having trouble with this exercise, you may use ",(0,i.yg)("a",{parentName:"p",href:"https://www.ired.team/offensive-security/code-injection-process-injection/binary-exploitation/rop-chaining-return-oriented-programming"},"this"),".\nKeep in mind that ",(0,i.yg)("inlineCode",{parentName:"p"},"peda"),"'s functionality may be a bit different from that of the provided setup, but you should have ",(0,i.yg)("a",{parentName:"p",href:"https://github.com/JonathanSalwan/ROPgadget"},"this"),".\nIn ",(0,i.yg)("inlineCode",{parentName:"p"},"pwndbg"),", you can use something like ",(0,i.yg)("inlineCode",{parentName:"p"},'rop --grep "pop rsi"'),"."),(0,i.yg)("h2",{id:"ctf"},"CTF"),(0,i.yg)("p",null,"In this laboratory, you will have to apply most of the concepts presented throughout this course under the format of ",(0,i.yg)("inlineCode",{parentName:"p"},"Capture-The-Flag")," tasks.\nThese tasks will test your understanding and mastery of specific static and dynamic analysis methods and tools, the compilation process, assembly language - syntax, registers, memory handling, functions, - as well as your ability to identify and exploit simple buffer overflow vulnerabilities."),(0,i.yg)("h3",{id:"return-oriented-programming"},"Return Oriented Programming"),(0,i.yg)("p",null,"For the bonus exercise, you will have to use Return Oriented Programming (ROP).\nThis is a technique in which, if we have the ability to overwrite the return address, we execute ",(0,i.yg)("inlineCode",{parentName:"p"},"gadgets"),".\nThese ",(0,i.yg)("inlineCode",{parentName:"p"},"gadgets")," are simply portions of the existing code that end with a ",(0,i.yg)("inlineCode",{parentName:"p"},"ret")," instruction."),(0,i.yg)("p",null,"Examples of gadgets include:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-asm"},"pop rdi ; mov rdx, rax ; mov r12, rax ; jmp 0xd178\npop rdi ; pop rbp ; ret\npop rdi ; ret\npop rsi ; pop rdi ; jmp 0xbd5f\n")),(0,i.yg)("p",null,"Notice that each gadget must end in a control-flow instruction, such as a ",(0,i.yg)("inlineCode",{parentName:"p"},"ret")," or a ",(0,i.yg)("inlineCode",{parentName:"p"},"jmp"),".\nThe reason is so that they can be chained together.\nWe usually write payloads that contain the addresses of these snippets.\nThen we trigger the ROP attack by placing this payload to overwrite a code pointer with the first address in the payload (such as overwriting the return address with this address)."),(0,i.yg)("p",null,"Follow the example below to get a better picture:"),(0,i.yg)("p",null,(0,i.yg)("img",{alt:"ROP Anatomy",src:n(1036).A})),(0,i.yg)("p",null,"The image above aims to execute ",(0,i.yg)("inlineCode",{parentName:"p"},"pop rdx; pop rbx; ret"),".\nLet's assume a function's return address is overwritten with that of the gadget, ",(0,i.yg)("inlineCode",{parentName:"p"},"gadget_addr"),".\nThe following things are going to happen:"),(0,i.yg)("ol",null,(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("p",{parentName:"li"},"The function's ",(0,i.yg)("inlineCode",{parentName:"p"},"ret")," will be executed and the ",(0,i.yg)("inlineCode",{parentName:"p"},"rip")," will move to the first instruction of the gadget: ",(0,i.yg)("inlineCode",{parentName:"p"},"pop rdx"),";\nthe ",(0,i.yg)("inlineCode",{parentName:"p"},"rsp")," will move towards the number 3 on the stack.")),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("inlineCode",{parentName:"p"},"pop rdx")," is executed, so the number pointed by ",(0,i.yg)("inlineCode",{parentName:"p"},"rsp")," is popped into ",(0,i.yg)("inlineCode",{parentName:"p"},"rdx"),", which is 3;\n",(0,i.yg)("inlineCode",{parentName:"p"},"rsp")," increases and now points to 4.")),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("p",{parentName:"li"},"Similarly, ",(0,i.yg)("inlineCode",{parentName:"p"},"pop rbx")," will pop the number 4 into ",(0,i.yg)("inlineCode",{parentName:"p"},"rbx"),";\nnow ",(0,i.yg)("inlineCode",{parentName:"p"},"rsp")," points to the new return address.")),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("p",{parentName:"li"},"The gadget's ",(0,i.yg)("inlineCode",{parentName:"p"},"ret")," is executed, thus allowing us to execute new code:\neither a separate function, or a new gadget."))),(0,i.yg)("p",null,"To determine the address of a gadget in a binary, there is the tool ",(0,i.yg)("a",{parentName:"p",href:"https://github.com/JonathanSalwan/ROPgadget"},"ROPgadget"),".\nAlternatively, in ",(0,i.yg)("inlineCode",{parentName:"p"},"pwndbg"),", you can use a command like ",(0,i.yg)("inlineCode",{parentName:"p"},'rop --grep "pop rsi"'),"."))}g.isMDXComponent=!0},1036:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/rop-anatomy-69d9174534b5d9f7615b0c7ffe5c6fca.svg"}}]);