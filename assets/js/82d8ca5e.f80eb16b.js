"use strict";(self.webpackChunkhardware_software_interface=self.webpackChunkhardware_software_interface||[]).push([[799],{5680:(e,n,i)=>{i.d(n,{xA:()=>d,yg:()=>m});var a=i(6540);function t(e,n,i){return n in e?Object.defineProperty(e,n,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[n]=i,e}function l(e,n){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),i.push.apply(i,a)}return i}function r(e){for(var n=1;n<arguments.length;n++){var i=null!=arguments[n]?arguments[n]:{};n%2?l(Object(i),!0).forEach((function(n){t(e,n,i[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):l(Object(i)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(i,n))}))}return e}function o(e,n){if(null==e)return{};var i,a,t=function(e,n){if(null==e)return{};var i,a,t={},l=Object.keys(e);for(a=0;a<l.length;a++)i=l[a],n.indexOf(i)>=0||(t[i]=e[i]);return t}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)i=l[a],n.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(t[i]=e[i])}return t}var s=a.createContext({}),p=function(e){var n=a.useContext(s),i=n;return e&&(i="function"==typeof e?e(n):r(r({},n),e)),i},d=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},c="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var i=e.components,t=e.mdxType,l=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),c=p(i),u=t,m=c["".concat(s,".").concat(u)]||c[u]||g[u]||l;return i?a.createElement(m,r(r({ref:n},d),{},{components:i})):a.createElement(m,r({ref:n},d))}));function m(e,n){var i=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var l=i.length,r=new Array(l);r[0]=u;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[c]="string"==typeof e?e:t,r[1]=o;for(var p=2;p<l;p++)r[p]=i[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,i)}u.displayName="MDXCreateElement"},8807:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>g,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var a=i(8168),t=(i(6540),i(5680));const l={},r="Lab 12 - Linking",o={unversionedId:"Labs/lab12",id:"Labs/lab12",title:"Lab 12 - Linking",description:"Task: Linking a Single File",source:"@site/docs/Labs/lab12.md",sourceDirName:"Labs",slug:"/Labs/lab12",permalink:"/hardware-software-interface/Labs/lab12",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Lab 11 - Buffer Management. Buffer Overflow",permalink:"/hardware-software-interface/Labs/lab11"},next:{title:"Lab 13 - CTF",permalink:"/hardware-software-interface/Labs/lab13"}},s={},p=[{value:"Task: Linking a Single File",id:"task-linking-a-single-file",level:2},{value:"Task: Linking Multiple Files",id:"task-linking-multiple-files",level:2},{value:"Task: Fixing the Entry Point 1",id:"task-fixing-the-entry-point-1",level:2},{value:"Task: Fixing the Entry Point",id:"task-fixing-the-entry-point",level:2},{value:"Task: Warning (not an error)",id:"task-warning-not-an-error",level:2},{value:"Task: Fixing Export Issues",id:"task-fixing-export-issues",level:2},{value:"Task: Using Symbols (Variables and Functions)",id:"task-using-symbols-variables-and-functions",level:2},{value:"Task: Fixing Library Issues",id:"task-fixing-library-issues",level:2},{value:"Task: Linking an Object File (without Source Code)",id:"task-linking-an-object-file-without-source-code",level:2},{value:"Linking",id:"linking",level:2},{value:"Linker Invocation",id:"linker-invocation",level:3},{value:"File Inspection",id:"file-inspection",level:3},{value:"Guide: Linking C and C++",id:"guide-linking-c-and-c",level:2}],d={toc:p},c="wrapper";function g(e){let{components:n,...i}=e;return(0,t.yg)(c,(0,a.A)({},d,i,{components:n,mdxType:"MDXLayout"}),(0,t.yg)("h1",{id:"lab-12---linking"},"Lab 12 - Linking"),(0,t.yg)("h2",{id:"task-linking-a-single-file"},"Task: Linking a Single File"),(0,t.yg)("p",null,"Access the directory ",(0,t.yg)("inlineCode",{parentName:"p"},"drills/tasks/single-link/support/example/"),".\nWe want to follow the linking commands for a single C source file.\nThe source file is ",(0,t.yg)("inlineCode",{parentName:"p"},"hello.c"),"."),(0,t.yg)("p",null,"In the three subdirectories, you will find support files for the following scenarios:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"a-dynamic/"),": creating a dynamic executable file"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"b-static/"),": creating a static executable file"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"c-standalone/"),": creating a standalone executable file without the standard C library")),(0,t.yg)("p",null,"In each subdirectory, we use the ",(0,t.yg)("inlineCode",{parentName:"p"},"make")," command to compile the executable file ",(0,t.yg)("inlineCode",{parentName:"p"},"hello"),".\nWe use the command ",(0,t.yg)("inlineCode",{parentName:"p"},"file hello")," to check whether the file is compiled dynamically or statically."),(0,t.yg)("p",null,"In the ",(0,t.yg)("inlineCode",{parentName:"p"},"Makefile")," files, the linking command uses ",(0,t.yg)("inlineCode",{parentName:"p"},"gcc"),".\nAn equivalent command that directly uses ",(0,t.yg)("inlineCode",{parentName:"p"},"ld")," is commented out.\nTo track the direct usage of ",(0,t.yg)("inlineCode",{parentName:"p"},"ld"),", we can comment out the ",(0,t.yg)("inlineCode",{parentName:"p"},"gcc")," command and uncomment the ",(0,t.yg)("inlineCode",{parentName:"p"},"ld")," command."),(0,t.yg)("p",null,"In the case of ",(0,t.yg)("inlineCode",{parentName:"p"},"c-standalone/"),", since we are not using the standard C library or C runtime library, we need to replace their functionalities.\nThe functionalities are replaced in the ",(0,t.yg)("inlineCode",{parentName:"p"},"start.asm")," and ",(0,t.yg)("inlineCode",{parentName:"p"},"puts.asm")," files.\nThese files implement the ",(0,t.yg)("inlineCode",{parentName:"p"},"_start")," function/symbol and the ",(0,t.yg)("inlineCode",{parentName:"p"},"puts")," function, respectively.\nThe ",(0,t.yg)("inlineCode",{parentName:"p"},"_start")," function/symbol is, by default, the entry point of an executable program.\nThe ",(0,t.yg)("inlineCode",{parentName:"p"},"_start")," function is responsible for calling the ",(0,t.yg)("inlineCode",{parentName:"p"},"main")," function and terminating the program.\nBecause there is no standard library, these two files are written in assembly language and use system calls."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Bonus"),": Add a command in the ",(0,t.yg)("inlineCode",{parentName:"p"},"Makefile")," in the ",(0,t.yg)("inlineCode",{parentName:"p"},"c-standalone/")," directory that explicitly uses ",(0,t.yg)("inlineCode",{parentName:"p"},"ld")," for linking."),(0,t.yg)("p",null,"Access the directory ",(0,t.yg)("inlineCode",{parentName:"p"},"drills/tasks/single-link/support/diy/"),".\nWe want to compile and link the source files in each subdirectory, following the model of the previous exercise."),(0,t.yg)("p",null,"Copy the ",(0,t.yg)("inlineCode",{parentName:"p"},"Makefile")," files and update them in each subdirectory to obtain the executable file."),(0,t.yg)("p",null,"If you're having difficulties solving this exercise, go through ",(0,t.yg)("a",{parentName:"p",href:"/hardware-software-interface/Labs/lab12#linking"},"this")," reading material."),(0,t.yg)("h2",{id:"task-linking-multiple-files"},"Task: Linking Multiple Files"),(0,t.yg)("p",null,"Access the directory ",(0,t.yg)("inlineCode",{parentName:"p"},"drills/tasks/multiple-link/support/example/"),".\nWe want to follow the linking commands from multiple C source files: ",(0,t.yg)("inlineCode",{parentName:"p"},"main.c"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"add.c"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"sub.c"),"."),(0,t.yg)("p",null,"As in the previous exercises, there are three subdirectories for three different scenarios:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"a-no-header/"),": external function declarations are made directly in the C source file (",(0,t.yg)("inlineCode",{parentName:"li"},"main.c"),")"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"b-header/"),": external function declarations are made in a separate header file (",(0,t.yg)("inlineCode",{parentName:"li"},"ops.h"),")"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"c-lib/"),": external function declarations are made in a separate header file, and linking is done using a static library")),(0,t.yg)("p",null,"In each subdirectory, we use the ",(0,t.yg)("inlineCode",{parentName:"p"},"make")," command to compile the executable file ",(0,t.yg)("inlineCode",{parentName:"p"},"main"),"."),(0,t.yg)("p",null,"Access the directory ",(0,t.yg)("inlineCode",{parentName:"p"},"drills/tasks/multiple-link/support/diy/"),".\nWe want to compile and link the source files in each subdirectory, following the model of the previous exercise."),(0,t.yg)("p",null,"Copy the ",(0,t.yg)("inlineCode",{parentName:"p"},"Makefile")," files and update them in each subdirectory to obtain the executable file."),(0,t.yg)("p",null,"If you're having difficulties solving this exercise, go through ",(0,t.yg)("a",{parentName:"p",href:"/hardware-software-interface/Labs/lab12#linking"},"this")," reading material."),(0,t.yg)("h2",{id:"task-fixing-the-entry-point-1"},"Task: Fixing the Entry Point 1"),(0,t.yg)("p",null,"Access the directory ",(0,t.yg)("inlineCode",{parentName:"p"},"drills/tasks/entry-fix-1/support/"),".\nWe want to track issues with defining the ",(0,t.yg)("inlineCode",{parentName:"p"},"main()")," function."),(0,t.yg)("p",null,"Go to the subdirectory ",(0,t.yg)("inlineCode",{parentName:"p"},"a-c/"),".\nRun the ",(0,t.yg)("inlineCode",{parentName:"p"},"make")," command, interpret the encountered error, and resolve it by editing the ",(0,t.yg)("inlineCode",{parentName:"p"},"hello.c")," file."),(0,t.yg)("p",null,"Go to the subdirectory ",(0,t.yg)("inlineCode",{parentName:"p"},"b-asm/"),".\nRun the ",(0,t.yg)("inlineCode",{parentName:"p"},"make")," command, interpret the encountered error, and resolve it by editing the ",(0,t.yg)("inlineCode",{parentName:"p"},"hello.asm")," file."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Bonus"),": In the subdirectories ",(0,t.yg)("inlineCode",{parentName:"p"},"c-extra-nolibc/")," and ",(0,t.yg)("inlineCode",{parentName:"p"},"d-extra-libc/"),", find solutions that do not modify the source code of ",(0,t.yg)("inlineCode",{parentName:"p"},"hello.c"),".\nThese solutions instead modify the build system to use a different function, other than ",(0,t.yg)("inlineCode",{parentName:"p"},"main()"),", as the program's entry point."),(0,t.yg)("p",null,"If you're having difficulties solving this exercise, go through ",(0,t.yg)("a",{parentName:"p",href:"/hardware-software-interface/Labs/lab12#linking"},"this")," reading material."),(0,t.yg)("h2",{id:"task-fixing-the-entry-point"},"Task: Fixing the Entry Point"),(0,t.yg)("p",null,"Access the directory ",(0,t.yg)("inlineCode",{parentName:"p"},"drills/tasks/entry-fix-2/support/"),".\nRun the ",(0,t.yg)("inlineCode",{parentName:"p"},"make")," command, interpret the encountered error, and resolve it by editing the ",(0,t.yg)("inlineCode",{parentName:"p"},"hello.c")," file."),(0,t.yg)("p",null,"If you're having difficulties solving this exercise, go through ",(0,t.yg)("a",{parentName:"p",href:"/hardware-software-interface/Labs/lab12#linking"},"this")," reading material."),(0,t.yg)("h2",{id:"task-warning-not-an-error"},"Task: Warning (not an error)"),(0,t.yg)("p",null,"Access the directory ",(0,t.yg)("inlineCode",{parentName:"p"},"drills/tasks/include-fix/support/"),".\nRun the ",(0,t.yg)("inlineCode",{parentName:"p"},"make")," command.\nA warning appears, but it is from the preprocessing/compilation process.\nResolve this warning by editing the ",(0,t.yg)("inlineCode",{parentName:"p"},"hello.c")," file."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Bonus"),": Fix the warning without using the ",(0,t.yg)("inlineCode",{parentName:"p"},"#include")," directive."),(0,t.yg)("p",null,"If you're having difficulties solving this exercise, go through ",(0,t.yg)("a",{parentName:"p",href:"/hardware-software-interface/Labs/lab12#linking"},"this")," reading material."),(0,t.yg)("h2",{id:"task-fixing-export-issues"},"Task: Fixing Export Issues"),(0,t.yg)("p",null,"Access the directory ",(0,t.yg)("inlineCode",{parentName:"p"},"drills/tasks/export-fix/support/"),".\nEach subdirectory (",(0,t.yg)("inlineCode",{parentName:"p"},"a-func/"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"b-var/"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"c-var-2/"),") contains a problem related to the export of symbols (functions or variables).\nIn each subdirectory, run the ",(0,t.yg)("inlineCode",{parentName:"p"},"make")," command, identify the issue, and edit the necessary files to resolve it."),(0,t.yg)("p",null,"If you're having difficulties solving this exercise, go through ",(0,t.yg)("a",{parentName:"p",href:"/hardware-software-interface/Labs/lab12#linking"},"this")," reading material."),(0,t.yg)("h2",{id:"task-using-symbols-variables-and-functions"},"Task: Using Symbols (Variables and Functions)"),(0,t.yg)("p",null,"Access the directory ",(0,t.yg)("inlineCode",{parentName:"p"},"drills/tasks/10-var-func-fix/support/"),".\nRun the ",(0,t.yg)("inlineCode",{parentName:"p"},"make")," command, interpret the encountered error, and resolve it by editing the source files."),(0,t.yg)("p",null,"If you're having difficulties solving this exercise, go through ",(0,t.yg)("a",{parentName:"p",href:"/hardware-software-interface/Labs/lab12#linking"},"this")," reading material."),(0,t.yg)("h2",{id:"task-fixing-library-issues"},"Task: Fixing Library Issues"),(0,t.yg)("p",null,"Access the directory ",(0,t.yg)("inlineCode",{parentName:"p"},"drills/tasks/lib-fix/support/"),".\nRun the ",(0,t.yg)("inlineCode",{parentName:"p"},"make")," command, interpret the encountered error, and resolve it by editing the ",(0,t.yg)("inlineCode",{parentName:"p"},"Makefile"),".\nRefer to the ",(0,t.yg)("inlineCode",{parentName:"p"},"Makefile")," in the directory ",(0,t.yg)("inlineCode",{parentName:"p"},"drills/tasks/multiple-link/support/example/c-lib/"),"."),(0,t.yg)("p",null,"If you're having difficulties solving this exercise, go through ",(0,t.yg)("a",{parentName:"p",href:"/hardware-software-interface/Labs/lab12#linking"},"this")," reading material."),(0,t.yg)("h2",{id:"task-linking-an-object-file-without-source-code"},"Task: Linking an Object File (without Source Code)"),(0,t.yg)("p",null,"Access the directory ",(0,t.yg)("inlineCode",{parentName:"p"},"drills/tasks/obj-link-dev/support/"),".\nThe file ",(0,t.yg)("inlineCode",{parentName:"p"},"shop.o")," exposes an interface (functions and variables) that allows displaying messages.\nEdit the ",(0,t.yg)("inlineCode",{parentName:"p"},"main.c")," file to properly call the exposed interface and display the messages:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-bash"},"price is 21\nquantity is 42\n")),(0,t.yg)("p",null,"Explore the interface and the content of the functions in the ",(0,t.yg)("inlineCode",{parentName:"p"},"shop.o")," file using ",(0,t.yg)("inlineCode",{parentName:"p"},"nm")," and ",(0,t.yg)("inlineCode",{parentName:"p"},"objdump"),"."),(0,t.yg)("p",null,"If you're having difficulties solving this exercise, go through ",(0,t.yg)("a",{parentName:"p",href:"/hardware-software-interface/Labs/lab12#linking"},"this")," reading material."),(0,t.yg)("h2",{id:"linking"},"Linking"),(0,t.yg)("p",null,"Linking is the final phase of the building process.\nLinking combines multiple object files into an executable file."),(0,t.yg)("p",null,"To obtain an executable file from object files, the linker performs the following actions:"),(0,t.yg)("ol",null,(0,t.yg)("li",{parentName:"ol"},"Symbol resolution: locating the undefined symbols of one object file in other object files."),(0,t.yg)("li",{parentName:"ol"},"Section merging: merging sections of the same type from different object files into a single section in the executable file."),(0,t.yg)("li",{parentName:"ol"},"Address binding: after merging, the effective address symbols within the executable file can be established."),(0,t.yg)("li",{parentName:"ol"},"Symbol relocation: once the symbol addresses are set, the instructions and data referring to those addresses in the executable must be updated."),(0,t.yg)("li",{parentName:"ol"},"Entry point establishment: specifying the address of the first instruction to be executed.")),(0,t.yg)("h3",{id:"linker-invocation"},"Linker Invocation"),(0,t.yg)("p",null,"The linker is generally invoked by the compilation utility (",(0,t.yg)("inlineCode",{parentName:"p"},"gcc"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"clang"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"cl"),").\nThus, invoking the linker is transparent to the user.\nIn specific cases, such as creating a kernel image or images for embedded systems, the user will invoke the linker directly."),(0,t.yg)("p",null,"If we have a source C file ",(0,t.yg)("inlineCode",{parentName:"p"},"app.c"),", we will use the compiler to obtain the object file ",(0,t.yg)("inlineCode",{parentName:"p"},"app.o"),":"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-console"},"gcc -c -o app.o app.c\n")),(0,t.yg)("p",null,"Then, to obtain the executable file ",(0,t.yg)("inlineCode",{parentName:"p"},"app")," from the object file ",(0,t.yg)("inlineCode",{parentName:"p"},"app.o"),", we use the ",(0,t.yg)("inlineCode",{parentName:"p"},"gcc")," utility again:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-console"},"gcc -o app app.o\n")),(0,t.yg)("p",null,"In the background, ",(0,t.yg)("inlineCode",{parentName:"p"},"gcc")," will invoke the linker and build the executable ",(0,t.yg)("inlineCode",{parentName:"p"},"app"),".\nThe linker will also link against the standard C library (libc)."),(0,t.yg)("p",null,"The linking process will work only if the file ",(0,t.yg)("inlineCode",{parentName:"p"},"app.c")," has the ",(0,t.yg)("inlineCode",{parentName:"p"},"main()")," function defined, which is the main function of the program.\nLinked files must have a single ",(0,t.yg)("inlineCode",{parentName:"p"},"main()")," function in order to produce an executable."),(0,t.yg)("p",null,"If we have multiple C source files, we invoke the compiler for each file and then the linker:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-console"},"gcc -c -o helpers.o helpers.c\ngcc -c -o app.o app.c\ngcc -o app app.o helpers.o\n")),(0,t.yg)("p",null,"The last command is the linking command, which links the object files ",(0,t.yg)("inlineCode",{parentName:"p"},"app.o")," and ",(0,t.yg)("inlineCode",{parentName:"p"},"helpers.o")," into the executable file ",(0,t.yg)("inlineCode",{parentName:"p"},"app"),"."),(0,t.yg)("p",null,"In the case of C++ source files, we will use the ",(0,t.yg)("inlineCode",{parentName:"p"},"g++")," command:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-console"},"g++ -c -o helpers.o helpers.cpp\ng++ -c -o app.o app.cpp\ng++ -o app app.o helpers.o\n")),(0,t.yg)("p",null,"We can also use the ",(0,t.yg)("inlineCode",{parentName:"p"},"gcc")," command for linking, specifying linking with the standard C++ library (libc++):"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-console"},"gcc -o app app.o helpers.o -lstdc++\n")),(0,t.yg)("p",null,"The Linux linking utility, ",(0,t.yg)("inlineCode",{parentName:"p"},"ld"),", is invoked transparently by ",(0,t.yg)("inlineCode",{parentName:"p"},"gcc")," or ",(0,t.yg)("inlineCode",{parentName:"p"},"g++"),".\nTo see how the linker is invoked, we use the ",(0,t.yg)("inlineCode",{parentName:"p"},"-v")," option of the ",(0,t.yg)("inlineCode",{parentName:"p"},"gcc")," utility, with the following output:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-console"},"/usr/lib/gcc/x86_64-linux-gnu/7/collect2 -plugin /usr/lib/gcc/x86_64-linux-gnu/7/liblto_plugin.so\n-plugin-opt=/usr/lib/gcc/x86_64-linux-gnu/7/lto-wrapper -plugin-opt=-fresolution=/tmp/ccwnf5NM.res\n-plugin-opt=-pass-through=-lgcc -plugin-opt=-pass-through=-lgcc_s -plugin-opt=-pass-through=-lc\n-plugin-opt=-pass-through=-lgcc -plugin-opt=-pass-through=-lgcc_s --build-id --eh-frame-hdr -m elf_i386 --hash-style=gnu\n--as-needed -dynamic-linker /lib/ld-linux.so.2 -z relro -o hello\n/usr/lib/gcc/x86_64-linux-gnu/7/../../../i386-linux-gnu/crt1.o\n/usr/lib/gcc/x86_64-linux-gnu/7/../../../i386-linux-gnu/crti.o /usr/lib/gcc/x86_64-linux-gnu/7/32/crtbegin.o\n-L/usr/lib/gcc/x86_64-linux-gnu/7/32 -L/usr/lib/gcc/x86_64-linux-gnu/7/../../../i386-linux-gnu\n-L/usr/lib/gcc/x86_64-linux-gnu/7/../../../../lib32 -L/lib/i386-linux-gnu -L/lib/../lib32 -L/usr/lib/i386-linux-gnu\n-L/usr/lib/../lib32 -L/usr/lib/gcc/x86_64-linux-gnu/7 -L/usr/lib/gcc/x86_64-linux-gnu/7/../../../i386-linux-gnu\n-L/usr/lib/gcc/x86_64-linux-gnu/7/../../.. -L/lib/i386-linux-gnu -L/usr/lib/i386-linux-gnu hello.o -lgcc --push-state\n--as-needed -lgcc_s --pop-state -lc -lgcc --push-state --as-needed -lgcc_s --pop-state\n/usr/lib/gcc/x86_64-linux-gnu/7/32/crtend.o /usr/lib/gcc/x86_64-linux-gnu/7/../../../i386-linux-gnu/crtn.o\nCOLLECT_GCC_OPTIONS='-no-pie' '-m32' '-v' '-o' 'hello' '-mtune=generic' '-march=i686'\n")),(0,t.yg)("p",null,"The ",(0,t.yg)("inlineCode",{parentName:"p"},"collect2")," utility is, in fact, a wrapper around the ",(0,t.yg)("inlineCode",{parentName:"p"},"ld"),' utility.\nThe result of running the command is complex. A "manual" invocation of the ',(0,t.yg)("inlineCode",{parentName:"p"},"ld")," command would look like this:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-console"},"ld -dynamic-linker /lib/ld-linux.so.2 -m elf_i386 -o app /usr/lib32/crt1.o /usr/lib32/crti.o app.o helpers.o -lc /usr/lib32/crtn.o\n")),(0,t.yg)("p",null,"The arguments of the above command have the following meanings:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"-dynamic-linker /lib/ld-linux.so.2"),": specifies the dynamic loader/linker used for loading the dynamic executable"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"-m elf_i386"),": links files for the x86 architecture (32-bit, i386)"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"/usr/lib32/crt1.o"),", ",(0,t.yg)("inlineCode",{parentName:"li"},"/usr/lib32/crti.o"),", ",(0,t.yg)("inlineCode",{parentName:"li"},"/usr/lib32/crtn.o"),": represent the C runtime library (",(0,t.yg)("inlineCode",{parentName:"li"},"crt")," - ",(0,t.yg)("em",{parentName:"li"},"C runtime"),") that provides the necessary support for loading the executable"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"-lc"),": links against standard C library (libc)")),(0,t.yg)("h3",{id:"file-inspection"},"File Inspection"),(0,t.yg)("p",null,"To track the linking process, we use static analysis utilities such as ",(0,t.yg)("inlineCode",{parentName:"p"},"nm"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"objdump"),", and ",(0,t.yg)("inlineCode",{parentName:"p"},"readelf"),"."),(0,t.yg)("p",null,"We use the ",(0,t.yg)("inlineCode",{parentName:"p"},"nm")," utility to display symbols from an object file or an executable file:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-console"},"$ nm hello.o\n00000000 T main\n         U puts\n\n$ nm hello\n0804a01c B __bss_start\n0804a01c b completed.7283\n0804a014 D __data_start\n0804a014 W data_start\n08048370 t deregister_tm_clones\n08048350 T _dl_relocate_static_pie\n080483f0 t __do_global_dtors_aux\n08049f10 t __do_global_dtors_aux_fini_array_entry\n0804a018 D __dso_handle\n08049f14 d _DYNAMIC\n0804a01c D _edata\n0804a020 B _end\n080484c4 T _fini\n080484d8 R _fp_hw\n08048420 t frame_dummy\n08049f0c t __frame_dummy_init_array_entry\n0804861c r __FRAME_END__\n0804a000 d _GLOBAL_OFFSET_TABLE_\n         w __gmon_start__\n080484f0 r __GNU_EH_FRAME_HDR\n080482a8 T _init\n08049f10 t __init_array_end\n08049f0c t __init_array_start\n080484dc R _IO_stdin_used\n080484c0 T __libc_csu_fini\n08048460 T __libc_csu_init\n         U __libc_start_main@@GLIBC_2.0\n08048426 T main\n         U puts@@GLIBC_2.0\n080483b0 t register_tm_clones\n08048310 T _start\n0804a01c D __TMC_END__\n08048360 T __x86.get_pc_thunk.bx\n")),(0,t.yg)("p",null,"The ",(0,t.yg)("inlineCode",{parentName:"p"},"nm")," command displays three columns:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"the symbol's address"),(0,t.yg)("li",{parentName:"ul"},"the section and type where the symbol is located"),(0,t.yg)("li",{parentName:"ul"},"the symbol's name")),(0,t.yg)("p",null,"A symbol is the name of a global variable or function.\nIt is used by the linker to make connections between different object modules.\nSymbols are not necessary for executables, which is why executables can be stripped."),(0,t.yg)("p",null,"The symbol's address is actually the offset within a section for object files and is the effective address for executables."),(0,t.yg)("p",null,"The second column specifies the section and type of the symbol.\nIf it is uppercase, then the symbol is exported and can be used by another module.\nIf it is lowercase, then the symbol is not exported and is local to the object module, making it unusable in other modules.\nThus:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"d"),": the symbol is in the initialized data area (",(0,t.yg)("inlineCode",{parentName:"li"},".data"),"), unexported"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"D"),": the symbol is in the initialized data area (",(0,t.yg)("inlineCode",{parentName:"li"},".data"),"), exported"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"t"),": the symbol is in the code area (",(0,t.yg)("inlineCode",{parentName:"li"},".text"),"), unexported"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"T"),": the symbol is in the code area (",(0,t.yg)("inlineCode",{parentName:"li"},".text"),"), exported"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"r"),": the symbol is in the read-only data area (",(0,t.yg)("inlineCode",{parentName:"li"},".rodata"),"), unexported"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"R"),": the symbol is in the read-only data area (",(0,t.yg)("inlineCode",{parentName:"li"},".rodata"),"), exported"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"b"),": the symbol is in the uninitialized data area (",(0,t.yg)("inlineCode",{parentName:"li"},".bss"),"), unexported"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"B"),": the symbol is in the uninitialized data area (",(0,t.yg)("inlineCode",{parentName:"li"},".bss"),"), exported"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"U"),": the symbol is undefined (it is used in the current module but defined in another module)")),(0,t.yg)("p",null,"More information can be found in the manual page for the ",(0,t.yg)("inlineCode",{parentName:"p"},"nm")," utility."),(0,t.yg)("p",null,"Using the ",(0,t.yg)("inlineCode",{parentName:"p"},"objdump")," command, we can disassemble the code of object files and executables.\nThis way, we can see the assembly code and how the modules operate."),(0,t.yg)("p",null,"The ",(0,t.yg)("inlineCode",{parentName:"p"},"readelf")," command is used to inspect object or executable files.\nWith the ",(0,t.yg)("inlineCode",{parentName:"p"},"readelf")," command, we can view the headers of files.\nAn important piece of information in the header of executable files is the entry point, the address of the first instruction executed:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-console"},"$ readelf -h hello\nELF Header:\n  Magic:   7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00\n  Class:                             ELF32\n  Data:                              2's complement, little endian\n  Version:                           1 (current)\n  OS/ABI:                            UNIX - System V\n  ABI Version:                       0\n  Type:                              EXEC (Executable file)\n  Machine:                           Intel 80386\n  Version:                           0x1\n  Entry point address:               0x8048310\n  Start of program headers:          52 (bytes into file)\n  Start of section headers:          8076 (bytes into file)\n  Flags:                             0x0\n  Size of this header:               52 (bytes)\n  Size of program headers:           32 (bytes)\n  Number of program headers:         9\n  Size of section headers:           40 (bytes)\n  Number of section headers:         35\n  Section header string table index: 34\n")),(0,t.yg)("p",null,"Using the ",(0,t.yg)("inlineCode",{parentName:"p"},"readelf")," command, we can see the sections of an executable/object file:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-console"},"$ readelf -S hello\nThere are 35 section headers, starting at offset 0x1f8c:\nSection Headers:\n  [Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al\n  [ 0]                   NULL            00000000 000000 000000 00      0   0  0\n  [ 1] .interp           PROGBITS        08048154 000154 000013 00   A  0   0  1\n  [ 2] .note.ABI-tag     NOTE            08048168 000168 000020 00   A  0   0  4\n  [ 3] .note.gnu.build-i NOTE            08048188 000188 000024 00   A  0   0  4\n[...]\n")),(0,t.yg)("p",null,"Also, with the ",(0,t.yg)("inlineCode",{parentName:"p"},"readelf")," command, we can list (dump) the contents of a specific section:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-console"},"$ readelf -x .rodata hello\n\nHex dump of section '.rodata':\n  0x080484d8 03000000 01000200 48656c6c 6f2c2057 ........Hello, W\n  0x080484e8 6f726c64 2100                       orld!.\n")),(0,t.yg)("h2",{id:"guide-linking-c-and-c"},"Guide: Linking C and C++"),(0,t.yg)("p",null,"Access the directory ",(0,t.yg)("inlineCode",{parentName:"p"},"drills/tasks/cpp-obs/support/"),".\nWe want to observe how linking is performed with mixed sources: C and C++."),(0,t.yg)("p",null,"In the ",(0,t.yg)("inlineCode",{parentName:"p"},"bad/")," subdirectory, we have two directories, ",(0,t.yg)("inlineCode",{parentName:"p"},"c-calls-cpp/")," and ",(0,t.yg)("inlineCode",{parentName:"p"},"cpp-calls-c/"),", where we combine C and C++ sources.\nIn both cases, using ",(0,t.yg)("inlineCode",{parentName:"p"},"make")," displays errors.\nThis occurs because C++ symbols are ",(0,t.yg)("em",{parentName:"p"},"mangled"),"."),(0,t.yg)("p",null,"If we use the ",(0,t.yg)("inlineCode",{parentName:"p"},"nm")," command on object modules obtained from C source code, we get:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-console"},"$ nm add.o\n0000000000000000 T _Z3addii\n\n$ nm sub.o\n0000000000000000 T _Z3subii\n")),(0,t.yg)("p",null,"The symbol names are not ",(0,t.yg)("inlineCode",{parentName:"p"},"add")," and ",(0,t.yg)("inlineCode",{parentName:"p"},"sub"),", but rather ",(0,t.yg)("inlineCode",{parentName:"p"},"_Z3addii")," and ",(0,t.yg)("inlineCode",{parentName:"p"},"_Z3subii"),".\nC++ symbol names are ",(0,t.yg)("em",{parentName:"p"},"mangled")," and define the function signature.\nThis allows for functions with the same name but different signatures.\nDetails about ",(0,t.yg)("em",{parentName:"p"},"name mangling")," can be found ",(0,t.yg)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Name_mangling"},"here"),"."),(0,t.yg)("p",null,"To resolve this, symbols defined in C and imported into C++, or vice versa, must be prefixed with the directive ",(0,t.yg)("inlineCode",{parentName:"p"},'extern "C"'),".\nThis way, the C++ compiler will use simple names for the imported/exported symbols, allowing them to be used together with C modules.\nThis is implemented in the ",(0,t.yg)("inlineCode",{parentName:"p"},"good/")," subdirectory.\nDetails about the ",(0,t.yg)("inlineCode",{parentName:"p"},'extern "C"')," directive can be found ",(0,t.yg)("a",{parentName:"p",href:"https://stackoverflow.com/a/1041880/4804196"},"here"),"."))}g.isMDXComponent=!0}}]);